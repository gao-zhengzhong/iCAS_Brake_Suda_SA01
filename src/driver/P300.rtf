{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fnil MS Sans Serif;}{\f1\fnil\fcharset2 Symbol;}{\f2\fswiss\fprq2 System;}{\f3\fnil Times New Roman;}{\f4\fswiss\fprq2 Arial;}}
{\colortbl\red0\green0\blue0;\red0\green0\blue128;\red255\green0\blue0;}
\deflang1031\pard\plain\f4\fs28\cf0 DAvE's Project Documentation
\par \plain\f4\fs22\cf0
\par \plain\f4\fs22\cf0 Project: \tab\tab\b P300.dav
\par 
\par \plain\f4\fs22\cf0 Controller: \tab\tab\b XC2365B-40F80
\par \plain\f4\fs22\cf0 Compiler: \tab\tab\b Keil
\par \plain\f4\fs22\cf0 Memory Model: \tab\b SMALL
\par 
\par \plain\f4\fs22\cf0 Date: \tab\tab\tab\b 2020/5/8 09:17:39
\par 
\par 
\par \plain\f4\fs22\cf2\b Please read this document carefully and note
\par \plain\f4\fs22\cf2\b the red-colored hints.
\par 
\par \plain\f4\fs22\cf2\b If you miss a file in the generated files list
\par \plain\f4\fs22\cf2\b maybe you have forgotten to select the
\par \plain\f4\fs22\cf2\b initialisation function of the related module.
\par 
\par \plain\f4\fs22\cf0 Generated Files:
\plain\f4\fs20\cf0\b
\par \tab\tab\tab MAIN.H
\par \tab\tab\tab MAIN.C
\par \tab\tab\tab SCS.H
\par \tab\tab\tab SCS.C
\par \tab\tab\tab XC23XXBREGS.H
\par \tab\tab\tab IO.H
\par \tab\tab\tab IO.C
\par \tab\tab\tab GPT1.H
\par \tab\tab\tab GPT1.C
\par \tab\tab\tab GPT2.H
\par \tab\tab\tab GPT2.C
\par \tab\tab\tab CCU60.H
\par \tab\tab\tab CCU60.C
\par \tab\tab\tab CCU61.H
\par \tab\tab\tab CCU61.C
\par \tab\tab\tab ADC0.H
\par \tab\tab\tab ADC0.C
\par \tab\tab\tab ADC1.H
\par \tab\tab\tab ADC1.C
\par \tab\tab\tab RTC.H
\par \tab\tab\tab RTC.C
\par \tab\tab\tab CAN.H
\par \tab\tab\tab CAN.C
\par 
\par 
\par \plain\f4\fs20\cf0
\par \plain\f4\fs28\cf0\ul Project Settings
\par
\par \plain\f4\fs24\cf0 Macros:\f4\fs20\cf0
\par \plain\f4\fs24\cf0 Functions:\f4\fs20\cf0
\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void MAIN_vInit(void)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This function initializes the microcontroller.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void MAIN_vUnlockProtecReg(void)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This function makes it possible to write one protected

\par \tab \tab register.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void MAIN_vLockProtecReg(void)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This function makes it possible to lock one protected

\par \tab \tab register.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void MAIN_vChangeFreq(void)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This function is used to select the external crystal and

\par \tab \tab configure the system frequency to 100MHz/80MHz/66MHz.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void main(void)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This is the main function.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void CanIf_RxIndication(ubyte Hrh, ulong Identifier, ubyte\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This function indicates the L-SDU has already been copied

\par \tab \tab from the CAN hardware (or shadow) buffer to the destination

\par \tab \tab bufferby the destination layer.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab Hrh:

\par \tab \tab Hardware Object Index of the message object (0-63)

\par \tab \tab Identifier:

\par \tab \tab Message Object Identifier

\par \tab \tab CanDlc:

\par \tab \tab Message Object Data Length

\par \tab \tab *CanSduPtr:

\par \tab \tab Message Object Data Pointer

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void CanIf_TxConfirmation(ubyte SwPduHandle)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This function Indicates a successful transmission.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab SwPduHandle:

\par \tab \tab Softare Pdu Handle

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void CanIf_ControllerBusOff(ubyte Controller)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This function Indicates that the controller went in bus-off

\par \tab \tab mode.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab Controller:

\par \tab \tab CAN Controller for which bus-off state is requested. Number

\par \tab \tab of node ( 0 - 3)

\par
\par \plain\f4\fs24\cf0 Initialization:
\par \plain\f4\fs20\cf0\b
\par
\tab Configuration of the System Clock:\par 
\tab - VCO clock used, input clock is connected\par 
\tab - input frequency is 8.00 MHz\par 
\tab - configured system frequency is 80.00 MHz\par 
\par 

\par \plain\f4\fs20\cf0
\par \plain\f4\fs28\cf0\ul Project Settings
\par
\par \plain\f4\fs24\cf0 Macros:\f4\fs20\cf0
\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab INLINE void Scs_EnableHighPrecOsc(unsigned int Enable)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This use case function enables or disables the high precision

\par \tab \tab oscillator for external crystal / clock at crystal input; may

\par \tab \tab be called by the user to reduce waiting time.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab Enable: 0 = Disable, 1 = Enable

\par \plain\f4\fs24\cf0 Functions:\f4\fs20\cf0
\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab Scs_ErrorType Scs_lWaitForVcoLock(unsigned int Timeout)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This private function waits for VCO lock.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b Error code, 0 = no error\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab Scs_ErrorType Scs_lEnableVcoBypass(unsigned int Enable)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This private function enables or disables VCO bypass.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b Error code, 0 = no error\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab Enable: 0 = Disable, 1 = Enable

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab INLINE Scs_ErrorType Scs_lSelectExternalPllClock(void)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This private function selects the external clock source for

\par \tab \tab the PLL.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b Error code, 0 = no error\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab INLINE void Scs_lStartTimer(unsigned int Cycles)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This private function starts timer T13 and waits until the

\par \tab \tab specified number of clocks is counted.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab Cycles: Number of T13 clocks to count, 0...65535

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab Scs_ErrorType Scs_lApplyNewK1Div(unsigned int K1Div)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This private function applies a new K1 divider value to the

\par \tab \tab PLL.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b Error code, 0 = no error\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab K1Div: K1 divider value

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab Scs_ErrorType Scs_lApplyNewNDiv(unsigned int NDiv)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This private function applies a new N divider value

\par \tab \tab to the PLL.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b Error code, 0 = no error\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab NDiv: N divider value

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab Scs_ErrorType Scs_lApplyNewPDiv(unsigned int PDiv)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This private function applies a new P divider value

\par \tab \tab to the PLL.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b Error code, 0 = no error\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab PDiv: P divider value

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab Scs_ErrorType Scs_lApplyNewVcoDivs(unsigned int PDiv,\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This private function applies new P, N and K2 dividers

\par \tab \tab to the VCO.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b Error code, 0 = no error\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab PDiv: P divider value

\par \tab \tab NDiv: N divider value

\par \tab \tab K2Div: K2 divider value

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab Scs_ErrorType Scs_lCheckFreqHighPrecOsc(void)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This private function checks the high precision oscillator

\par \tab \tab for a valid output clock.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b Error code, 0 = no error\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab Scs_ErrorType Scs_lEnableVcoLockEmerg(void)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This private function enables the VCO loss-of-lock

\par \tab \tab emergency handling.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b Error code, 0 = no error\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab Scs_ErrorType Scs_lRampPll(Scs_K2RampType *K2RampPtr)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This private function applies a stepwise ramp-up or ramp-down

\par \tab \tab of the PLL output frequency using a set of K2 dividers

\par \tab \tab and delay values.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b Error code, 0 = no error\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab Scs_ErrorType Scs_ApplyNewK2Div(unsigned int K2Div)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This global function applies a new K2 divider value

\par \tab \tab to the PLL.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b Error code, 0 = no error\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab K2Div: K2 divider value

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab Scs_ErrorType Scs_GoFromBaseModeToNormalMode(void)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This global function performs a transition from base mode

\par \tab \tab to normal mode.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b Error code, 0 = no error\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void Scs_InitTimer(void)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This global function CCU6 timer T13 as driver timer;

\par \tab \tab previous CCU6 register contents may be saved.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void Scs_RestoreTimer(void)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This global function restores CCU6 register contents

\par \tab \tab saved during the previous execution of Scs_InitTimer.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par \plain\f4\fs20\cf0
\par \plain\f4\fs28\cf0\ul Parallel Ports
\par
\par \plain\f4\fs24\cf0 Macros:\f4\fs20\cf0
\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab IO_ubReadPin(PinName)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro returns the status of the chosen portpin.

\par \tab \tab Note:

\par \tab \tab See the 'Defines for the parameter PinName' section in this

\par \tab \tab header file for the available definitions for the parameter

\par \tab \tab PinName.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b Status of the chosen portpin\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab PinName:

\par \tab \tab Pin to be read

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab IO_vSetPin(PinName)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro sets the chosen portpin to '1'.

\par \tab \tab Note:

\par \tab \tab See the 'Defines for the parameter PinName' section in this

\par \tab \tab header file for the available definitions for the parameter

\par \tab \tab PinName.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab PinName:

\par \tab \tab Pin to be set to '1'

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab IO_vResetPin(PinName)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro sets the chosen portpin to '0'.

\par \tab \tab Note:

\par \tab \tab See the 'Defines for the parameter PinName' section in this

\par \tab \tab header file for the available definitions for the parameter

\par \tab \tab PinName.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab PinName:

\par \tab \tab Pin to be set to '0'

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab IO_vTogglePin(PinName)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This marco toggles the chosen portpin.

\par \tab \tab Note:

\par \tab \tab See the 'Defines for the parameter PinName' section in this

\par \tab \tab header file for the available definitions for the parameter

\par \tab \tab PinName.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab PinName:

\par \tab \tab Pin to be toggled

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab IO_vSetPinIn(PinName, Mode)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab The chosen portpin is configured as input.

\par \tab \tab The following definitions for Mode are available:

\par \tab \tab IO_NO_PULL        (no pull device connected)

\par \tab \tab IO_PULL_DOWN      (pull-down device connected)

\par \tab \tab IO_PULL_UP        (pull-up device connected)

\par \tab \tab IO_LOOP_BACK     (Loop back device connected)

\par \tab \tab IO_INVERTED_NO_PULL    (Inverted no pull device connected)

\par \tab \tab IO_INVERTED_PULL_DOWN  (Inverted pull-down device connected)

\par \tab \tab IO_INVERTED_PULL_UP    (Inverted pull-up device connected)

\par \tab \tab IO_INVERTED_LOOP_BACK (Inverted Loop back device connected)

\par \tab \tab Note:

\par \tab \tab See the 'Defines for the parameter PinName' section in this

\par \tab \tab header file for the available definitions for the parameter

\par \tab \tab PinName.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab PinName:

\par \tab \tab Pin to be set to input

\par \tab \tab Mode:

\par \tab \tab Input

\par \tab \tab selection(Pull-Down,Pull-Up,Inv-Pull-Down,Inv-Pull-Up)for

\par \tab \tab chosen port pin

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab IO_vSetPinOut(PinName, Mode)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab The chosen portpin is configured as output.

\par \tab \tab The following definitions for Mode are available:

\par \tab \tab IO_PUSH_PULL  (push-pull mode)

\par \tab \tab IO_OPEN_DRAIN (open drain mode)

\par \tab \tab Note:

\par \tab \tab See the 'Defines for the parameter PinName' section in this

\par \tab \tab header file for the available definitions for the parameter

\par \tab \tab PinName.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab PinName:

\par \tab \tab Pin to be set to output

\par \tab \tab Mode:

\par \tab \tab Output Characteristic(Push-Pull,Open-Drain)for chosen port

\par \tab \tab Pin

\par \plain\f4\fs24\cf0 Functions:\f4\fs20\cf0
\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void IO_vInit(void)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This is the initialization function of the IO function

\par \tab \tab library. It is assumed that the SFRs used by this library

\par \tab \tab are in reset state.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs24\cf0 Initialization:
\par \plain\f4\fs20\cf0\b
\par
\tab Configuration of Port P0:\par 
\tab P0.0 is used as alternate output for the CCU61 output (CC60)\par 
\tab - push/pull output is selected\par 
\tab P0.1 is used as alternate output for the CCU61 output (CC61)\par 
\tab - push/pull output is selected\par 
\tab P0.2 is used as alternate output for the  CCU61 output (CC62)\par 
\tab - push/pull output is selected\par 
\tab P0.3 is used as alternate output for the CCU61 output (COUT60)\par 
\tab - push/pull output is selected\par 
\tab P0.4 is used as alternate output for the CCU61 output (COUT61)\par 
\tab - push/pull output is selected\par 
\tab P0.5 is used as alternate output for the  CCU61 output (COUT62)\par 
\tab - push/pull output is selected\par 
\tab P0.7 is used as general purpose output\par 
\tab - push/pull output is selected\par 
\tab - the pin status is low level\par 
\par 
\tab P0.0 - P0.3 output driver characteristic: strong driver\par 
\tab P0.4 - P0.7 output driver characteristic: strong driver\par 
\par 
\tab P0.0 - P0.3 output edge characteristic: sharp edge mode\par 
\tab P0.4 - P0.7 output edge characteristic: sharp edge mode\par 
\par 
\tab Configuration of Port P1:\par 
\tab P1.4 is used as general input\par 
\tab - pull device is tristate\par 
\tab P1.5 is used as general input\par 
\tab - pull device is tristate\par 
\tab P1.7 is used as general purpose output\par 
\tab - push/pull output is selected\par 
\tab - the pin status is low level\par 
\par 
\tab P1.0 - P1.3 output driver characteristic: strong driver\par 
\tab P1.4 - P1.7 output driver characteristic: strong driver\par 
\par 
\tab P1.0 - P1.3 output edge characteristic: sharp edge mode\par 
\tab P1.4 - P1.7 output edge characteristic: sharp edge mode\par 
\par 
\tab Configuration of Port P2:\par 
\tab P2.0 is used as alternate input for the CAN0 Receive input(RXDC0C)\par 
\tab P2.1 is used as alternate output for the CAN0 Transmit output(TXDC0C)\par 
\tab - push/pull output is selected\par 
\tab P2.2 is used as alternate output for the CAN1 Transmit output(TXDC1B)\par 
\tab - push/pull output is selected\par 
\tab P2.4 is used as alternate input for the CAN1 Receive input(RXDC1A)\par 
\par 
\tab P2.0 - P2.3 output driver characteristic: strong driver\par 
\tab P2.4 - P2.7 output driver characteristic: strong driver\par 
\tab P2.8 - P2.13 output driver characteristic: strong driver\par 
\par 
\tab P2.0 - P2.3 output edge characteristic: sharp edge mode\par 
\tab P2.4 - P2.7 output edge characteristic: sharp edge mode\par 
\tab P2.8 - P2.13 output edge characteristic: sharp edge mode\par 
\par 
\tab Configuration of Port P4:\par 
\tab P4.0 is used as general input\par 
\tab - pull device is tristate\par 
\tab P4.1 is used as general input\par 
\tab - pull device is tristate\par 
\tab P4.2 is used as general input\par 
\tab - pull device is tristate\par 
\tab P4.3 is used as general input\par 
\tab - pull device is tristate\par 
\par 
\tab P4.0 - P4.3 output driver characteristic: strong driver\par 
\par 
\tab P4.0 - P4.3 output edge characteristic: sharp edge mode\par 
\par 
\tab Configuration of Port P5:\par 
\tab P5.0 is used as alternate input for the  Analog Input Pin (AN50)\par 
\tab P5.2 is used as alternate input for the  Analog Input Pin (AN52)\par 
\tab P5.3 is used as alternate input for the  Analog Input Pin (AN53)\par 
\tab P5.4 is used as alternate input for the  Analog Input Pin (AN54)\par 
\tab P5.5 is used as alternate input for the  Analog Input Pin (AN55)\par 
\tab P5.8 is used as alternate input for the  Analog Input Pin (AN58)\par 
\tab P5.9 is used as alternate input for the  Analog Input Pin (AN59)\par 
\tab P5.10 is used as alternate input for the  Analog Input Pin (AN510)\par 
\tab P5.11 is used as alternate input for the  Analog Input Pin (AN511)\par 
\tab P5.13 is used as alternate input for the  Analog Input Pin (AN513)\par 
\tab P5.15 is used as alternate input for the  Analog Input Pin (AN515)\par 
\par 
\tab Configuration of Port P6:\par 
\tab P6.0 is used as general input\par 
\tab - pull device is tristate\par 
\tab P6.2 is used as general purpose output\par 
\tab - push/pull output is selected\par 
\tab - the pin status is low level\par 
\par 
\tab P6.0 - P6.2 output driver characteristic: strong driver\par 
\par 
\tab P6.0 - P6.2 output edge characteristic: sharp edge mode\par 
\par 
\tab Configuration of Port P7:\par 
\tab P7.0 is used as general purpose output\par 
\tab - push/pull output is selected\par 
\tab - the pin status is low level\par 
\tab P7.1 is used as general purpose output\par 
\tab - push/pull output is selected\par 
\tab - the pin status is low level\par 
\tab P7.3 is used as general input\par 
\tab - pull device is tristate\par 
\tab P7.4 is used as general purpose output\par 
\tab - push/pull output is selected\par 
\tab - the pin status is low level\par 
\par 
\tab P7.0 - P7.3 output driver characteristic: strong driver\par 
\tab P7.4 - P7.4 output driver characteristic: strong driver\par 
\par 
\tab P7.0 - P7.3 output edge characteristic: sharp edge mode\par 
\tab P7.4 - P7.4 output edge characteristic: sharp edge mode\par 
\par 
\tab Configuration of Port P10:\par 
\tab P10.1 is used as general purpose output\par 
\tab - push/pull output is selected\par 
\tab - the pin status is low level\par 
\tab P10.4 is used as general purpose output\par 
\tab - push/pull output is selected\par 
\tab - the pin status is low level\par 
\par 
\tab P10.0 - P10.3 output driver characteristic: strong driver\par 
\tab P10.4 - P10.7 output driver characteristic: strong driver\par 
\tab P10.8 - P10.11 output driver characteristic: strong driver\par 
\tab P10.12 - P10.15 output driver characteristic: strong driver\par 
\par 
\tab P10.0 - P10.3 output edge characteristic: sharp edge mode\par 
\tab P10.4 - P10.7 output edge characteristic: sharp edge mode\par 
\tab P10.8 - P10.11 output edge characteristic: sharp edge mode\par 
\tab P10.12 - P10.15 output edge characteristic: sharp edge mode\par 
\par 
\tab Configuration of Port P15:\par 
\tab P15.0 is used as alternate input for the  Analog Input Pin (AN0)\par 
\tab P15.2 is used as alternate input for the  Analog Input Pin (AN2)\par 
\tab P15.4 is used as alternate input for the  Analog Input Pin (AN4)\par 
\par 

\par \plain\f4\fs20\cf0
\par \plain\f4\fs28\cf0\ul General Purpose Timer Unit (GPT1)
\par
\par \plain\f4\fs24\cf0 Macros:\f4\fs20\cf0
\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab GPT1_vStartTmr(TimerNr)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro starts the selected GPT1 timer. The timer

\par \tab \tab continues to count from where it had stopped. The following

\par \tab \tab definitions are available for TimerNr:

\par \tab \tab GPT1_TIMER_2

\par \tab \tab GPT1_TIMER_3

\par \tab \tab GPT1_TIMER_4

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab TimerNr:

\par \tab \tab the name of the timer to be started

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab GPT1_vStopTmr(TimerNr)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro stops the selected GPT1 timer. The contents of

\par \tab \tab the timer register remain unchanged. The remote control of

\par \tab \tab the selected timer is cleared. The following definitions

\par \tab \tab are available for TimerNr:

\par \tab \tab GPT1_TIMER_2

\par \tab \tab GPT1_TIMER_3

\par \tab \tab GPT1_TIMER_4

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab TimerNr:

\par \tab \tab The name of the timer to be stopped

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab GPT1_vClearTmr(TimerNr)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro stops the selected GPT1 timer and sets the timer

\par \tab \tab register to 0. The remote control of the selected timer is

\par \tab \tab cleared. The following definitions are available for

\par \tab \tab TimerNr:

\par \tab \tab GPT1_TIMER_2

\par \tab \tab GPT1_TIMER_3

\par \tab \tab GPT1_TIMER_4

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab TimerNr:

\par \tab \tab The name of the timer to be cleared

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab GPT1_uwReadTmr(TimerNr)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro returns the contents of the selected GPT1 timer.

\par \tab \tab The timer is not stopped. Access of the CPU to the

\par \tab \tab registers of the timer is of higher priority than a timer

\par \tab \tab increment, a reload or a capture event. The following

\par \tab \tab definitions are available for TimerNr:

\par \tab \tab GPT1_TIMER_2

\par \tab \tab GPT1_TIMER_3

\par \tab \tab GPT1_TIMER_4

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b Current 16-bit value of the timer\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab TimerNr:

\par \tab \tab The name of the timer to be readed

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab GPT1_vLoadTmr(TimerNr, Value)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro loads the selected GPT1 timer with the forwarded

\par \tab \tab value. The timer is not stopped. The access of the CPU to

\par \tab \tab the registers of the timers is of higher priority than a

\par \tab \tab timer increment, a reload or a capture event. The following

\par \tab \tab definitions are available for TimerNr:

\par \tab \tab GPT1_TIMER_2

\par \tab \tab GPT1_TIMER_3

\par \tab \tab GPT1_TIMER_4

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab TimerNr:

\par \tab \tab The name of the timer to be loaded

\par \tab \tab Value:

\par \tab \tab 16-bit value to be loaded

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab GPT1_vSetToggLatch()\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro sets the T3OTL (timer output toggle latch) bit

\par \tab \tab in timer 3 control register. This bit is toggled on each

\par \tab \tab over/underflow of timer 3. If the alternative output

\par \tab \tab function is enabled, the port T3OUT is set depending on

\par \tab \tab T3OTL. This macro sets the bit T3OTL on high. This can

\par \tab \tab influence the output signal at T3OUT by SW.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab GPT1_vClrToggLatch()\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro resets the T3OTL (timer output toggle latch) bit

\par \tab \tab in timer 3 control register. This bit is toggled on each

\par \tab \tab over/underflow of timer 3. If the alternative output

\par \tab \tab function is enabled, the port T3OUT is set depending on

\par \tab \tab T3OTL. This macro sets the bit T3OTL on low. This can

\par \tab \tab influence the output signal at T3OUT by SW.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab GPT1_vCountUp(TimerNr)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro sets the counter direction of the selected timer

\par \tab \tab to up. The timer is not stopped.

\par \tab \tab Note:

\par \tab \tab Concerning timer x it is possible to make the counter

\par \tab \tab direction dependent on the level at TxEUD. If this

\par \tab \tab functionality has been selected, then function

\par \tab \tab GPT1_vCountUp() set a  0 at TxEUD enabling counting up of

\par \tab \tab timer x and a 1 at TxEUD enabling counting down of timer x.

\par \tab \tab The following definitions are available for TimerNr:

\par \tab \tab GPT1_TIMER_2

\par \tab \tab GPT1_TIMER_3

\par \tab \tab GPT1_TIMER_4

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab TimerNr:

\par \tab \tab The name of the timer to be used

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab GPT1_vCountDown(TimerNr)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro sets the counter direction of the selected timer

\par \tab \tab to down. The timer is not stopped.

\par \tab \tab Note:

\par \tab \tab Concerning timer x it is possible to make the counter

\par \tab \tab direction dependent on the level at TxEUD. If this

\par \tab \tab functionality has been selected, then function

\par \tab \tab GPT1_vCountDown() set a 0 at TxEUD enabling counting down

\par \tab \tab of timer x and a 1 at TxEUD enabling counting up of timer

\par \tab \tab x. The following definitions are available for TimerNr:

\par \tab \tab GPT1_TIMER_2

\par \tab \tab GPT1_TIMER_3

\par \tab \tab GPT1_TIMER_4

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab TimerNr:

\par \tab \tab The name of the timer to be used

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab GPT1_ubGetCountDirection(TimerNr)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro returns the status of the bit TxRDIR of selected

\par \tab \tab TimerNr. If return value is 0 the selceted timer counts up,

\par \tab \tab else the timer counts down.

\par \tab \tab Note:

\par \tab \tab Use this macro only for TimerNr wich works in incremental

\par \tab \tab interface mode.

\par \tab \tab The following definitions are available for TimerNr:

\par \tab \tab GPT1_TIMER_2

\par \tab \tab GPT1_TIMER_3

\par \tab \tab GPT1_TIMER_4

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b 0 if timer counts up, else 1\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab TimerNr:

\par \tab \tab The name of the timer to be used

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab GPT1_vSetTmrRemoteControl(TimerNr)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro sets the remote control bit of selected timer.

\par \tab \tab In this mode the timer is controlled by the run bit of

\par \tab \tab timer T3. To reset this mode call the macros GPT1_vStopTmr

\par \tab \tab or GPT1_vClearTmr.

\par \tab \tab Note:

\par \tab \tab Use this macro only for TimerNr wich is stopped

\par \tab \tab The following definitions are available for TimerNr:

\par \tab \tab GPT1_TIMER_2

\par \tab \tab GPT1_TIMER_4

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab TimerNr:

\par \tab \tab The name of the timer to be used

\par \plain\f4\fs24\cf0 Functions:\f4\fs20\cf0
\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void GPT1_vInit(void)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This is the initialization function of the GPT1 function

\par \tab \tab library. It is assumed that the SFRs used by this library

\par \tab \tab are in reset state.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void GPT1_viTmr3(void)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This is the interrupt service routine for the GPT1 timer 3.

\par \tab \tab It is called up in the case of over or underflow of the

\par \tab \tab timer 3 register.

\par \tab \tab If the incremental interface mode is selected it is called

\par \tab \tab up if count edge or count direction was detected.

\par \tab \tab Please note that you have to add application specific code

\par \tab \tab to this function.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void GPT1_viTmr2(void)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This is the interrupt service routine for the GPT1 timer 2.

\par \tab \tab It is called up in the case of over or underflow of the

\par \tab \tab timer 2 register.

\par \tab \tab If the incremental interface mode is selected and the

\par \tab \tab interrupt for this mode is not disabled it is called up if

\par \tab \tab count edge or count direction was detected.

\par \tab \tab Please note that you have to add application specific code

\par \tab \tab to this function.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void GPT1_viTmr4(void)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This is the interrupt service routine for the GPT1 timer 4.

\par \tab \tab It is called up in the case of over or underflow of the

\par \tab \tab timer 4 register.

\par \tab \tab If the incremental interface mode is selected and the

\par \tab \tab interrupt for this mode is not disabled it is called up if

\par \tab \tab count edge or count direction was detected.

\par \tab \tab Please note that you have to add application specific code

\par \tab \tab to this function.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab ubyte GPT1_ubCheckRotation(ubyte TimerNr)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This function returns the status of the bit TxCHDIR of

\par \tab \tab selected TimerNr and resets the status bit. If return value

\par \tab \tab is 1 change of count direction was detected.

\par \tab \tab Note:

\par \tab \tab Use this function only for TimerNr wich works in

\par \tab \tab incremental interface mode (rotation detection mode) AND

\par \tab \tab the interrupt for this mode is disabled.

\par \tab \tab The following definitions are available for TimerNr:

\par \tab \tab GPT1_TIMER_2

\par \tab \tab GPT1_TIMER_3

\par \tab \tab GPT1_TIMER_4

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b 1 if count direction was changed, else 0\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab TimerNr:

\par \tab \tab The name of the timer to be used

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab ubyte GPT1_ubCheckEdge(ubyte TimerNr)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This function returns the status of the bit TxEDGE of

\par \tab \tab selected TimerNr and resets the status bit. If return value

\par \tab \tab is 1 successful edge was detected.

\par \tab \tab Note:

\par \tab \tab Use this function only for TimerNr wich works in

\par \tab \tab incremental interface mode (edge detection mode) AND the

\par \tab \tab interrupt for this mode is disabled.

\par \tab \tab The following definitions are available for TimerNr:

\par \tab \tab GPT1_TIMER_2

\par \tab \tab GPT1_TIMER_3

\par \tab \tab GPT1_TIMER_4

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b 1 if successful edge was detected, else 0\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab TimerNr:

\par \tab \tab The name of the timer to be used

\par
\par \plain\f4\fs24\cf0 Initialization:
\par \plain\f4\fs20\cf0\b
\par
\tab Configuration of Timer Block Prescaler 1:\par 
\par 
\tab Configuration of Timer Block Prescaler 1:\par 
\tab - prescaler for timer block 1 is 4\par 
\par 
\tab Configuration of the GPT1 Core Timer 3:\par 
\tab - timer 3 works in timer mode\par 
\tab - external up/down control is disabled\par 
\tab - prescaler factor is 4\par 
\tab - up/down control bit is reset\par 
\tab - alternate output function T3OUT () is disabled\par 
\tab - timer 3 output toggle latch (T3OTL) is set to 0\par 
\tab - timer 3 run bit is reset\par 
\par 
\tab Configuration of the GPT1 Auxiliary Timer 2:\par 
\tab - timer 2 works in timer mode\par 
\tab - external up/down control is disabled\par 
\tab - prescaler factor is 4\par 
\tab - up/down control bit is reset\par 
\tab - timer 2 run bit is reset\par 
\par 
\tab Configuration of the GPT1 Auxiliary Timer 4:\par 
\tab - timer 4 works in timer mode\par 
\tab - external up/down control is disabled\par 
\tab - prescaler factor is 4\par 
\tab - up/down control bit is reset\par 
\tab - timer 4 run bit is reset\par 
\par 
\tab Configuration of the used GPT1 Port Pins:\par 
\par 
\tab Configuration of the used GPT1 Interrupts:\par 
\tab timer 2 service request node configuration:\par 
\tab - timer 2 interrupt priority level (ILVL) = 10\par 
\tab - timer 2 interrupt group level (GLVL) = 0\par 
\tab - timer 2 group priority extension (GPX) = 0\par 
\par 
\tab timer 3 service request node configuration:\par 
\tab - timer 3 interrupt priority level (ILVL) = 9\par 
\tab - timer 3 interrupt group level (GLVL) = 0\par 
\tab - timer 3 group priority extension (GPX) = 0\par 
\par 
\tab timer 4 service request node configuration:\par 
\tab - timer 4 interrupt priority level (ILVL) = 8\par 
\tab - timer 4 interrupt group level (GLVL) = 0\par 
\tab - timer 4 group priority extension (GPX) = 0\par 
\par 

\par \plain\f4\fs20\cf0
\par \plain\f4\fs28\cf0\ul General Purpose Timer Unit (GPT2)
\par
\par \plain\f4\fs24\cf0 Macros:\f4\fs20\cf0
\par \plain\f4\fs24\cf0 Functions:\f4\fs20\cf0
\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void GPT2_vInit(void)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This is the initialization function of the GPT2 function

\par \tab \tab library. It is assumed that the SFRs used by this library

\par \tab \tab are in reset state.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs24\cf0 Initialization:
\par \plain\f4\fs20\cf0\b
\par
\tab Configuration of Timer Block Prescaler 2:\par 
\tab - prescaler for timer block 2 is 2\par 
\par 
\tab Configuration of the GPT2 Core Timer 5:\par 
\tab - timer 5 works in timer mode\par 
\tab - prescaler factor is 2\par 
\tab - up/down control bit is reset\par 
\tab - external up/down control is disabled\par 
\tab - timer 5 run bit is reset\par 
\tab - timer 5 remote control is disabled\par 
\par 
\tab Configuration of the GPT2 Core Timer 6:\par 
\tab - timer 6 works in timer mode\par 
\tab - prescaler factor is 2\par 
\tab - up/down control bit is reset\par 
\tab - external up/down control is disabled\par 
\tab - alternate output function T6OUT (P6.2) is disabled\par 
\tab - alternate output function T6OUT (P7.0) is disabled\par 
\tab - timer 6 output toggle latch (T6OTL) is set to 0\par 
\tab - timer 6 run bit is reset\par 
\tab - timer 6 is not cleared on a capture\par 
\par 
\tab Configuration of the GPT2 CAPREL:\par 
\tab - capture T5 into CAPREL is disabled\par 
\tab - capture trigger from pin CAPIN\par 
\tab - capure is disabled\par 
\tab - timer 5 is not cleared on a capture\par 
\par 
\tab Configuration of the used GPT2 Port Pins:\par 
\par 
\tab Configuration of the used GPT2 Interrupts:\par 
\par 

\par \plain\f4\fs20\cf0
\par \plain\f4\fs28\cf0\ul Capture / Compare Unit 60 (CCU60)
\par
\par \plain\f4\fs24\cf0 Macros:\f4\fs20\cf0
\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab CCU60_vStartTmr(TimerNr)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro starts the selected CCU60 timer. The timer

\par \tab \tab continues counting from where it stopped.

\par \tab \tab The following definitions for TimerNr are available:

\par \tab \tab CCU60_TIMER_12

\par \tab \tab CCU60_TIMER_13

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab TimerNr:

\par \tab \tab Name of the CCU60 timer to be started

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab CCU60_vStopTmr(TimerNr)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro stops the selected CCU60 timer. The content of

\par \tab \tab the timer register remains unchanged.

\par \tab \tab The following definitions for TimerNr are available:

\par \tab \tab CCU60_TIMER_12

\par \tab \tab CCU60_TIMER_13

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab TimerNr:

\par \tab \tab Name of the CCU60 timer to be stopped

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab CCU60_vResetTmr(TimerNr)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro sets the selected CCU60 timer counter register

\par \tab \tab to zero. Timer is not stopped.

\par \tab \tab The following definitions for TimerNr are available:

\par \tab \tab CCU60_TIMER_12

\par \tab \tab CCU60_TIMER_13

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab TimerNr:

\par \tab \tab Name of the CCU60 timer to be cleared

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab CCU60_vSetTmrPeriod(TimerNr, Value)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro loads the period register of the selected CCU60

\par \tab \tab timer.

\par \tab \tab Note: Call the macro CCU60_vEnableShadowTransfer() to

\par \tab \tab enable the shadow transfer.

\par \tab \tab The following definitions for TimerNr are available:

\par \tab \tab CCU60_TIMER_12

\par \tab \tab CCU60_TIMER_13

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab TimerNr:

\par \tab \tab Name of the CCU60 timer to be used

\par \tab \tab Value:

\par \tab \tab 16-bit Value with which the CCU60 timer reload register is

\par \tab \tab to be loaded

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab CCU60_uwGetTmrCounter(TimerNr)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro returns the contens of the selected CCU60 timer

\par \tab \tab counter register.

\par \tab \tab The following definitions for TimerNr are available:

\par \tab \tab CCU60_TIMER_12

\par \tab \tab CCU60_TIMER_13

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b 16-bit counter value\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab TimerNr:

\par \tab \tab Name of the CCU60 timer to be used

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab CCU60_uwSetTmrCounter(TimerNr, Value)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro loads the selected CCU60 timer counter register

\par \tab \tab with the parameter Value . It is possible to use this macro

\par \tab \tab only if the selected timer is stopped.

\par \tab \tab The following definitions for TimerNr are available:

\par \tab \tab CCU60_TIMER_12

\par \tab \tab CCU60_TIMER_13

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab TimerNr:

\par \tab \tab Name of the CCU60 timer to be used

\par \tab \tab Value:

\par \tab \tab 16-bit value with which the CCU60 counter register is to be

\par \tab \tab loaded

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab CCU60_vSetDeadTimePeriod(ubValue)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro loads the counter of the deat time register.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab ubValue:

\par \tab \tab counter value (ubValue = 0x01 .. 0x3F)

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab CCU60_vEnableShadowTransfer(TimerNr)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro enables the transfer from the shadow registers

\par \tab \tab to the actual CCU60 registers.

\par \tab \tab The following definitions for TimerNr are available:

\par \tab \tab CCU60_TIMER_12

\par \tab \tab CCU60_TIMER_13

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab TimerNr:

\par \tab \tab Name of the CCU60 timer to be used

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab CCU60_vLoadChannelShadowRegister(ChName, Value)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro loads the selected CCU60 channel shadow register

\par \tab \tab with the parameter Value.

\par \tab \tab The following definitions are available for RegName:

\par \tab \tab CCU60_CHANNEL_0 .. CCU60_CHANNEL_3 (see @Defines in header

\par \tab \tab file)

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab ChName:

\par \tab \tab Name of the CCU60 channel to be loaded

\par \tab \tab Value:

\par \tab \tab 16-bit Value with which the CCU60 shadow register is to be

\par \tab \tab loaded

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab CCU60_uwGetChannelShadowRegister(ChName)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro returns the content of the CCU60 capture/compare

\par \tab \tab shadow register of the selected channel.

\par \tab \tab The following definitions are available for RegName:

\par \tab \tab CCU60_CHANNEL_0 .. CCU60_CHANNEL_3 (see @Defines in header

\par \tab \tab file)

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b Current 16-bit value of the CCU60 shadow register\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab ChName:

\par \tab \tab Name of the CCU60 channel to be readed

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab CCU60_uwGetChannelRegister(ChName)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro returns the content of the CCU60 capture/compare

\par \tab \tab register of the selected channel.

\par \tab \tab The following definitions are available for RegName:

\par \tab \tab CCU60_CHANNEL_0 .. CCU60_CHANNEL_3 (see @Defines in header

\par \tab \tab file)

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b Current 16-bit value of the CCU60 register\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab ChName:

\par \tab \tab Name of the CCU60 channel to be readed

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab CCU60_vSetStatusBit(ChName)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro sets the capture / compare modifikation status

\par \tab \tab bit of the selected CCU60 channel.

\par \tab \tab The following definitions are available for ChName:

\par \tab \tab CCU60_CHANNEL_0 .. CCU60_CHANNEL_3 (see @Defines in header

\par \tab \tab file)

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab ChName:

\par \tab \tab Name of the CCU60 channel to be used

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab CCU60_vResetStatusBit(ChName)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro resets the capture / compare modifikation status

\par \tab \tab bit of the selected CCU60 channel.

\par \tab \tab The following definitions are available for ChName:

\par \tab \tab CCU60_CHANNEL_0 .. CCU60_CHANNEL_3 (see @Defines in header

\par \tab \tab file)

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab ChName:

\par \tab \tab Name of the CCU60 channel to be used

\par \plain\f4\fs24\cf0 Functions:\f4\fs20\cf0
\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void CCU60_vInit(void)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This is the initialization function of the CCU60 function

\par \tab \tab library. It is assumed that the SFRs used by this library

\par \tab \tab are in reset state.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void CCU60_viNodeI2(void)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This is the interrupt service routine for the CCU60 node

\par \tab \tab I2. If the content of the corresponding compare timer

\par \tab \tab (configurable) equals the content of the capture/compare

\par \tab \tab register or if a capture event occurs at the associated

\par \tab \tab port pin, the interrupt request flag is set and an

\par \tab \tab interrupt is triggered (only if enabled).

\par \tab \tab Please note that you have to add application specific code

\par \tab \tab to this function.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void CCU60_viNodeI3(void)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This is the interrupt service routine for the CCU60 node

\par \tab \tab I3. If the content of the corresponding compare timer

\par \tab \tab (configurable) equals the content of the capture/compare

\par \tab \tab register or if a capture event occurs at the associated

\par \tab \tab port pin, the interrupt request flag is set and an

\par \tab \tab interrupt is triggered (only if enabled).

\par \tab \tab Please note that you have to add application specific code

\par \tab \tab to this function.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs24\cf0 Initialization:
\par \plain\f4\fs20\cf0\b
\par
\tab Configuration of KERNEL REGISTERS :\par 
\tab - CCU60 Module is enabled.\par 
\tab - The CCU60 module clock = 80.000 MHz.\par 
\tab - T12 is enabled.\par 
\tab - T13 is enabled.\par 
\tab - MCM is enabled.\par 
\par 
\tab Configuration of CCU60 Timer 12:\par 
\tab - Timer 12 Input clock factor (T12CLK) is 1\par 
\tab - prescaler factor is 0\par 
\tab - Timer 12 run bit is reset\par 
\tab - Single shot mode is disabled\par 
\tab - Timer 12 works in edge aligned mode\par 
\tab - Interrupt on period match is enabled\par 
\tab - Interrupt on one match is disabled\par 
\tab - No External run selection is selected.\par 
\tab - Timer mode is selected.\par 
\tab -\par 
\par 
\tab Configuration of T13HR Signal:\par 
\tab - Signal T13HRD is selected as Input\par 
\par 
\tab Configuration of CCU60 Timer 13:\par 
\tab - Timer 13 Input Clock factor (T13CLK) is 1\par 
\tab - prescaler factor is 0\par 
\tab - Timer 13 run bit is reset\par 
\tab - Trigger control is disabled\par 
\tab - No External run selection is selected.\par 
\tab - Timer mode is selected.\par 
\tab -\par 
\tab - Single shot mode is disabled\par 
\tab - Interrupt on period match is enabled\par 
\tab - Interrupt on compare match is disabled\par 
\par 
\tab Configuration of Multi Channel Mode:\par 
\tab - Multi channel mode is disabled\par 
\par 
\tab Configuration of CCU60 Channel 0:\par 
\tab - Channel 0 is disabled\par 
\tab - T12 modulation for output CC60 is disabled\par 
\tab - T13 modulation for output CC60 is disabled\par 
\tab - T13 modulation for output CC60 is disabled\par 
\par 
\tab - Generation interrupt on flag ICC60R is disabled\par 
\tab - Generation interrupt on flag ICC60F is disabled\par 
\par 
\tab Configuration of CCU60 Channel 1:\par 
\tab - Channel 1 is disabled\par 
\tab - T12 modulation for output CC61 is disabled\par 
\tab - T13 modulation for output CC61 is disabled\par 
\tab - T13 modulation for output CC61 is disabled\par 
\par 
\tab - Generation interrupt on flag ICC61R is disabled\par 
\tab - Generation interrupt on flag ICC61F is disabled\par 
\par 
\tab Configuration of CCU60 Channel 2:\par 
\tab - Channel 2 is disabled\par 
\tab - T12 modulation for output CC62 is disabled\par 
\tab - T13 modulation for output CC62 is disabled\par 
\tab - T13 modulation for output CC62 is disabled\par 
\par 
\tab - Generation interrupt on flag ICC62R is disabled\par 
\tab - Generation interrupt on flag ICC62F is disabled\par 
\par 
\tab Configuration of CCU60 Channel 3:\par 
\tab - T13 output is not inverted\par 
\par 
\tab Configuration of CCU60 trap control:\par 
\tab - Trap can only be generated by SW by setting the bit TRPF\par 
\tab - The trap state is left when a zero-match of T12 (while counting up)\par 
\tab is detected (synchronization to T12)\par 
\tab - Bit TRPF is automatically cleared by HW (according to TRPPEN, TRPM0\par 
\tab and TRPM1)\par 
\tab - Trap interrupt is disabled\par 
\par 
\tab Configuration of CCU60 interrupt control:\par 
\tab - For channel 0 interrupts is node I0 selected\par 
\tab - For channel 1 interrupts is node I0 selected\par 
\tab - For channel 2 interrupts is node I0 selected\par 
\tab - For correct hall event interrupt is node I0 selected\par 
\tab - For error interrupts is node I0 selected\par 
\tab - For T12 interrupts is node I2 selected\par 
\tab - For T13 interrupts is node I3 selected\par 
\par 
\tab Configuration of the used CCU60 Channels Interrupts:\par 
\tab NodeI2 service request node configuration:\par 
\tab - NodeI2 interrupt priority level (ILVL) = 13\par 
\tab - NodeI2 interrupt group level (GLVL) = 0\par 
\tab - NodeI2 group priority extension (GPX) = 0\par 
\par 
\tab NodeI3 service request node configuration:\par 
\tab - NodeI3 interrupt priority level (ILVL) = 12\par 
\tab - NodeI3 interrupt group level (GLVL) = 0\par 
\tab - NodeI3 group priority extension (GPX) = 0\par 
\par 
\tab Configuration of T12, T13 ---- CCU60_TCTR4 Register:\par 
\tab - Enable shadow transfer of T12 and T13\par 
\tab - Timer 12 run bit is reset\par 
\tab - Timer 13 run bit is reset\par 
\par 
\tab Configuration of the used CCU60 Channel Port Pins:\par 
\par 

\par \plain\f4\fs20\cf0
\par \plain\f4\fs28\cf0\ul Capture / Compare Unit 61 (CCU61)
\par
\par \plain\f4\fs24\cf0 Macros:\f4\fs20\cf0
\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab CCU61_vStartTmr(TimerNr)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro starts the selected CCU61 timer. The timer

\par \tab \tab continues counting from where it stopped.

\par \tab \tab The following definitions for TimerNr are available:

\par \tab \tab CCU61_TIMER_12

\par \tab \tab CCU61_TIMER_13

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab TimerNr:

\par \tab \tab Name of the CCU61 timer to be started

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab CCU61_vStopTmr(TimerNr)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro stops the selected CCU61 timer. The content of

\par \tab \tab the timer register remains unchanged.

\par \tab \tab The following definitions for TimerNr are available:

\par \tab \tab CCU61_TIMER_12

\par \tab \tab CCU61_TIMER_13

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab TimerNr:

\par \tab \tab Name of the CCU61 timer to be stopped

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab CCU61_vSetTmrPeriod(TimerNr, Value)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro loads the period register of the selected CCU61

\par \tab \tab timer.

\par \tab \tab Note: Call the macro CCU61_vEnableShadowTransfer() to

\par \tab \tab enable the shadow transfer.

\par \tab \tab The following definitions for TimerNr are available:

\par \tab \tab CCU61_TIMER_12

\par \tab \tab CCU61_TIMER_13

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab TimerNr:

\par \tab \tab Name of the CCU61 timer to be used

\par \tab \tab Value:

\par \tab \tab 16-bit Value with which the CCU61 timer reload register is

\par \tab \tab to be loaded

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab CCU61_uwSetTmrCounter(TimerNr, Value)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro loads the selected CCU61 timer counter register

\par \tab \tab with the parameter Value . It is possible to use this macro

\par \tab \tab only if the selected timer is stopped.

\par \tab \tab The following definitions for TimerNr are available:

\par \tab \tab CCU61_TIMER_12

\par \tab \tab CCU61_TIMER_13

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab TimerNr:

\par \tab \tab Name of the CCU61 timer to be used

\par \tab \tab Value:

\par \tab \tab 16-bit value with which the CCU61 counter register is to be

\par \tab \tab loaded

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab CCU61_vEnableShadowTransfer(TimerNr)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro enables the transfer from the shadow registers

\par \tab \tab to the actual CCU61 registers.

\par \tab \tab The following definitions for TimerNr are available:

\par \tab \tab CCU61_TIMER_12

\par \tab \tab CCU61_TIMER_13

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab TimerNr:

\par \tab \tab Name of the CCU61 timer to be used

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab CCU61_vLoadChannelShadowRegister(ChName, Value)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro loads the selected CCU61 channel shadow register

\par \tab \tab with the parameter Value.

\par \tab \tab The following definitions are available for RegName:

\par \tab \tab CCU61_CHANNEL_0 .. CCU61_CHANNEL_3 (see @Defines in header

\par \tab \tab file)

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab ChName:

\par \tab \tab Name of the CCU61 channel to be loaded

\par \tab \tab Value:

\par \tab \tab 16-bit Value with which the CCU61 shadow register is to be

\par \tab \tab loaded

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab CCU61_uwGetChannelShadowRegister(ChName)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro returns the content of the CCU61 capture/compare

\par \tab \tab shadow register of the selected channel.

\par \tab \tab The following definitions are available for RegName:

\par \tab \tab CCU61_CHANNEL_0 .. CCU61_CHANNEL_3 (see @Defines in header

\par \tab \tab file)

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b Current 16-bit value of the CCU61 shadow register\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab ChName:

\par \tab \tab Name of the CCU61 channel to be readed

\par \plain\f4\fs24\cf0 Functions:\f4\fs20\cf0
\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void CCU61_vInit(void)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This is the initialization function of the CCU61 function

\par \tab \tab library. It is assumed that the SFRs used by this library

\par \tab \tab are in reset state.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void CCU61_viNodeI0(void)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This is the interrupt service routine for the CCU61 node

\par \tab \tab I0. If the content of the corresponding compare timer

\par \tab \tab (configurable) equals the content of the capture/compare

\par \tab \tab register or if a capture event occurs at the associated

\par \tab \tab port pin, the interrupt request flag is set and an

\par \tab \tab interrupt is triggered (only if enabled).

\par \tab \tab Please note that you have to add application specific code

\par \tab \tab to this function.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs24\cf0 Initialization:
\par \plain\f4\fs20\cf0\b
\par
\tab Configuration of KERNEL REGISTERS :\par 
\tab - CCU61 Module is enabled.\par 
\tab - The CCU61 module clock = 80.000 MHz.\par 
\tab - T12 is enabled.\par 
\tab - T13 is enabled.\par 
\tab - MCM is enabled.\par 
\par 
\tab Configuration of CCU61 Timer 12:\par 
\tab - Timer 12 Input clock factor (T12CLK) is 0\par 
\tab - prescaler factor is 0\par 
\tab - Timer 12 run bit is reset\par 
\tab - Single shot mode is disabled\par 
\tab - Timer 12 works in center aligned mode\par 
\tab - Interrupt on period match is enabled\par 
\tab - Interrupt on one match is disabled\par 
\tab - No External run selection is selected.\par 
\tab - Timer mode is selected.\par 
\tab -\par 
\par 
\tab Configuration of T13HR Signal:\par 
\tab - Signal T13HRD is selected as Input\par 
\par 
\tab Configuration of CCU61 Timer 13:\par 
\tab - Timer 13 Input Clock factor (T13CLK) is 1\par 
\tab - prescaler factor is 0\par 
\tab - Timer 13 run bit is reset\par 
\tab - Trigger control is disabled\par 
\tab - No External run selection is selected.\par 
\tab - Timer mode is selected.\par 
\tab -\par 
\tab - Single shot mode is disabled\par 
\tab - Interrupt on period match is disabled\par 
\tab - Interrupt on compare match is disabled\par 
\par 
\tab Configuration of Multi Channel Mode:\par 
\tab - Multi channel mode is disabled\par 
\par 
\tab Configuration of CCU61 Channel 0:\par 
\tab - Compare mode 1 is selected\par 
\tab - T12 modulation for output CC60 is enabled\par 
\tab - T13 modulation for output CC60 is disabled\par 
\tab - The trap functionality of the pin CC60 is disabled\par 
\tab - The compare output CC60 drives passive level while CC60ST is '0'\par 
\tab - The passive level of the output CC60 is '1'\par 
\tab - T12 modulation for output COUT60 is enabled\par 
\tab - T13 modulation for output COUT60 is disabled\par 
\tab - The trap functionality of the pin COUT60 is disabled\par 
\tab - The compare output COUT60 drives passive level while CC60ST is '1'\par 
\tab - The passive level of the output COUT60 is '0'\par 
\tab - Dead time generation is enabled\par 
\par 
\tab - Generation interrupt on flag ICC60R is disabled\par 
\tab - Generation interrupt on flag ICC60F is disabled\par 
\par 
\tab Configuration of CCU61 Channel 1:\par 
\tab - Compare mode 1 is selected\par 
\tab - T12 modulation for output CC61 is enabled\par 
\tab - T13 modulation for output CC61 is disabled\par 
\tab - The trap functionality of the pin CC61 is disabled\par 
\tab - The compare output CC61 drives passive level while CC61ST is '0'\par 
\tab - The passive level of the output CC61 is '1'\par 
\tab - T12 modulation for output COUT61 is enabled\par 
\tab - T13 modulation for output COUT61 is disabled\par 
\tab - The trap functionality of the pin COUT61 is disabled\par 
\tab - The compare output COUT61 drives passive level while CC61ST is '1'\par 
\tab - The passive level of the output COUT61 is '0'\par 
\tab - Dead time generation is enabled\par 
\par 
\tab - Generation interrupt on flag ICC61R is disabled\par 
\tab - Generation interrupt on flag ICC61F is disabled\par 
\par 
\tab Configuration of CCU61 Channel 2:\par 
\tab - Channel 2 is disabled\par 
\tab - T12 modulation for output CC62 is disabled\par 
\tab - T13 modulation for output CC62 is disabled\par 
\tab - The trap functionality of the pin CC62 is disabled\par 
\tab - The passive level of the output CC62 is '0'\par 
\tab - The trap functionality of the pin COUT62 is disabled\par 
\tab - The passive level of the output COUT62 is '0'\par 
\tab - The passive level of the output COUT62 is '0'\par 
\par 
\tab - Generation interrupt on flag ICC62R is disabled\par 
\tab - Generation interrupt on flag ICC62F is disabled\par 
\par 
\tab Configuration of CCU61 Channel 3:\par 
\tab - T13 output is not inverted\par 
\par 
\tab Configuration of CCU61 trap control:\par 
\tab - Trap can only be generated by SW by setting the bit TRPF\par 
\tab - The trap state is left when a zero-match of T12 (while counting up)\par 
\tab is detected (synchronization to T12)\par 
\tab - Bit TRPF is automatically cleared by HW (according to TRPPEN, TRPM0\par 
\tab and TRPM1)\par 
\tab - Trap interrupt is disabled\par 
\par 
\tab Configuration of CCU61 interrupt control:\par 
\tab - For channel 0 interrupts is node I0 selected\par 
\tab - For channel 1 interrupts is node I0 selected\par 
\tab - For channel 2 interrupts is node I0 selected\par 
\tab - For correct hall event interrupt is node I0 selected\par 
\tab - For error interrupts is node I0 selected\par 
\tab - For T12 interrupts is node I0 selected\par 
\tab - For T13 interrupts is node I3 selected\par 
\par 
\tab Configuration of the used CCU61 Channels Interrupts:\par 
\tab NodeI0 service request node configuration:\par 
\tab - NodeI0 interrupt priority level (ILVL) = 14\par 
\tab - NodeI0 interrupt group level (GLVL) = 0\par 
\tab - NodeI0 group priority extension (GPX) = 0\par 
\par 
\tab Use PEC channel 0 for CCU61 I0 INT:\par 
\tab - normal interrupt\par 
\tab - pointers are not modified\par 
\tab - transfer a word\par 
\tab - service End of PEC interrrupt by a EOP interrupt node is disabled\par 
\tab - channel link mode is disabled\par 
\par 
\tab Configuration of T12, T13 ---- CCU61_TCTR4 Register:\par 
\tab - Enable shadow transfer of T12 and T13\par 
\tab - Timer 12 run bit is reset\par 
\tab - Timer 13 run bit is reset\par 
\par 
\tab Configuration of the used CCU61 Channel Port Pins:\par 
\tab - P0.0 is used for CCU61 output (CC60)\par 
\tab - P0.1 is used for CCU61 output (CC61)\par 
\tab - P0.2 is used for  CCU61 output (CC62)\par 
\tab - P0.3 is used for CCU61 output (COUT60)\par 
\tab - P0.4 is used for CCU61 output (COUT61)\par 
\tab - P0.5 is used for  CCU61 output (COUT62)\par 
\par 

\par \plain\f4\fs20\cf0
\par \plain\f4\fs28\cf0\ul Analog / Digital Converter  (ADC0)
\par
\par \plain\f4\fs24\cf0 Macros:\f4\fs20\cf0
\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab uword ADC0_uwBusy()\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro checks the conversion state of the current ADC

\par \tab \tab channel by examination of the busy flag (BUSY).It returns

\par \tab \tab '1' while a conversion is running.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b Returns a 1 if A/D converter is active, else 0\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab void ADC0_vSetSeq2QueueFlush()\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro Flushes the Sequential source 2 Queue

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab uword ADC0_uwGetSeq2QueueEmpty()\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro checks whether Sequential source 2 Queue depth

\par \tab \tab is empty or not

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b Returns '1' if sequential 2 queue is empty, else '0'\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab uword ADC0_uwGetResultData(RegNum)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro returns the left aligned, 10-bit result data of

\par \tab \tab the last conversion from requested result register

\par \tab \tab Ex- RegNum = RESULT_REG_0,for Result register 0

\par \tab \tab RegNum = RESULT_REG_2,for Result register 2

\par \tab \tab - For 8 bit resolution user has to right shift the result

\par \tab \tab by 2 bits as shown below

\par \tab \tab uwResult = ADC0_uwGetResultData(RESULT_REG_0);

\par \tab \tab uwResult >>= 2;

\par \tab \tab NOTE -

\par \tab \tab If this macro is called before ADC0_uwGetResultChNum macro

\par \tab \tab for the same result register then channel information will

\par \tab \tab be lost.So always call ADC0_uwGetResultChNum macro before

\par \tab \tab this macro if channel information is required.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b Returns result data from requested result register\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab RegNum:

\par \tab \tab RegNum: defines the result register number

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab ubyte ADC0_ubGetResultChNum(RegNum)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro returns channel number from requested result

\par \tab \tab register

\par \tab \tab Ex- RegNum = RESULT_REG_0,for Result register 0

\par \tab \tab RegNum = RESULT_REG_2,for Result register 2

\par \tab \tab NOTE -

\par \tab \tab If only channel information is required then make sure that

\par \tab \tab you call ADC0_vClearValidBit macro after reading the

\par \tab \tab channel number.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b Returns channel number from requested result register\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab RegNum:

\par \tab \tab RegNum: defines the result register number

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab uword ADC0_uwResultValid(RegNum)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro indicates that the contents of the result

\par \tab \tab register x is valid or not valid.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b 1 for valid and 0 for not valid\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab RegNum:

\par \tab \tab RegNum: defines the result register number

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab void ADC0_vClearValidBit(RegNum)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro clears valid bit flag for the requested result

\par \tab \tab register

\par \tab \tab Ex- RegNum = RESULT_REG_0,for Result register 0

\par \tab \tab RegNum = RESULT_REG_2,for Result register 2

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab RegNum:

\par \tab \tab RegNum: defines the result register number

\par \plain\f4\fs24\cf0 Functions:\f4\fs20\cf0
\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void ADC0_vInit(void)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This is the initialization function of the ADC function

\par \tab \tab library. It is assumed that the SFRs used by this library

\par \tab \tab are in reset state.

\par \tab \tab Following SFR fields will be initialized:

\par \tab \tab GLOBCTR  - Global Control

\par \tab \tab RSPR0    - Priority and Arbitration Register

\par \tab \tab ASENR    - Arbitration slot enable register

\par \tab \tab CHCTRx   - Channel Control Register x

\par \tab \tab RCRx     - Result Control Register x

\par \tab \tab KSCFG    - Module configuration Register

\par \tab \tab INPCR    - Input class Registers

\par \tab \tab CHINPRx  - Channel Interrupt register

\par \tab \tab EVINPRx  - Event Interrupt register

\par \tab \tab SYNCTR   - Synchronisation control register

\par \tab \tab LCBRx    - Limit check boundary register

\par \tab \tab PISEL    - Port input selection

\par \tab \tab QMR0     - Sequential 0 mode register

\par \tab \tab CRMR1    - Parallel mode register

\par \tab \tab QMR2     - Sequential 2 mode register

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void ADC0_vStartSeq0ReqChNum(ubyte ubExtTrg, ubyte\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This function starts the conversion of the requested

\par \tab \tab channel.

\par \tab \tab NOTE -

\par \tab \tab Before passing ubEnIntr argument as 1,make sure that Seq 0

\par \tab \tab source interrupt is enabled.

\par \tab \tab External Trigger -> 0,Indicates software trigger

\par \tab \tab (Conversion starts once this function is executed)

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab ubExtTrg:

\par \tab \tab External Trigger : defines external trigger.

\par \tab \tab ubEnIntr:

\par \tab \tab Enable Source Interrupt : defines source interrupt

\par \tab \tab ubRFill:

\par \tab \tab Refill : defines the refill

\par \tab \tab ubChannelNum:

\par \tab \tab Channel number : Name of the Request Channel Number (0 -

\par \tab \tab 15)- see macros defined in the header file

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void ADC0_vStartSeq2ReqChNum(ubyte ubExtTrg, ubyte\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This function starts the conversion of the requested

\par \tab \tab channel.

\par \tab \tab NOTE -

\par \tab \tab Before passing ubEnIntr argument as 1,make sure that Seq 2

\par \tab \tab source interrupt is enabled.

\par \tab \tab External Trigger -> 0,Indicates software trigger

\par \tab \tab (Conversion starts once this function is executed)

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab ubExtTrg:

\par \tab \tab External Trigger : defines external trigger.

\par \tab \tab ubEnIntr:

\par \tab \tab Enable Source Interrupt : defines source interrupt

\par \tab \tab ubRFill:

\par \tab \tab Refill : defines the refill

\par \tab \tab ubChannelNum:

\par \tab \tab Channel number : Name of the Request Channel Number (0 -

\par \tab \tab 15)- see macros defined in the header file

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void ADC0_vAliasChNum(ubyte ubAliasChNum, ubyte ubReqChNum)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This function assigns attributes of channel0 or channel1 to

\par \tab \tab the requested channel

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab ubAliasChNum:

\par \tab \tab AliasChNum: defines the Alias channel number (Ch0 and Ch1)

\par \tab \tab ubReqChNum:

\par \tab \tab ReqChNum: defines the channel number to be aliased

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void ADC0_vSeqSoftTrigger(ubyte ubSrc)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This function sets TREV bit for the requested sequential

\par \tab \tab source in the register QMRx.

\par \tab \tab It is applicable only when sequential source conversion

\par \tab \tab request API is called with 'ubExtTrg' parameter set to '1'.

\par \tab \tab This API helps in triggering (software) all the sequential

\par \tab \tab conversion requests which are waiting for external hardware

\par \tab \tab trigger to occur.

\par \tab \tab Ex- ubSrc = ADC0_SOURCE_0,for sequential source 0

\par \tab \tab ubSrc = ADC0_SOURCE_2,for sequential source 2

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab ubSrc:

\par \tab \tab ubSrc: defines the sequential source number

\par
\par \plain\f4\fs24\cf0 Initialization:
\par \plain\f4\fs20\cf0\b
\par
\tab Configuration of ADC0 kernel configuration register:\par 
\par 
\tab - the ADC module clock is enabled\par 
\tab - the ADC module clock = 80.00 MHz\par 
\par 
\tab Configure global control register:\par 
\tab --- Conversion Timing -----------------\par 
\tab - Conversion time (CTC) = 00.85 us\par 
\tab - Analog clock is 1/4th of module clock and digital clock is 1/1 times\par 
\tab of module clock\par 
\par 
\tab - the permanent arbitration mode is selected\par 
\par 
\tab Configuration of Arbitration Slot enable register and also the Source\par 
\tab Priority register:\par 
\tab - Arbitration Slot 0 is enabled\par 
\tab - Arbitration Slot 1 is disabled\par 
\tab - Arbitration Slot 2 is enabled\par 
\tab - the priority of request source 0 is high\par 
\tab - the wait-for-start mode is selected for source 0\par 
\tab - the priority of request source 1 is low\par 
\tab - the wait-for-start mode is selected for source 1\par 
\tab - the priority of request source 2 is high\par 
\tab - the wait-for-start mode is selected for source 2\par 
\par 
\tab Configuration of Channel Control Registers:\par 
\tab Configuration of Channel 0\par 
\tab - the result register0 is selected\par 
\tab - the limit check 0 is selected\par 
\tab - the reference voltage selected is Standard Voltage (Varef)\par 
\tab - the input class selected is Input Class 1\par 
\tab - LCBR0 is selected as upper boundary\par 
\tab - LCBR1 is selected as lower boundary\par 
\par 
\tab Configuration of Channel 2\par 
\tab - the result register1 is selected\par 
\tab - the limit check 0 is selected\par 
\tab - the reference voltage selected is Standard Voltage (Varef)\par 
\tab - the input class selected is Input Class 1\par 
\tab - LCBR0 is selected as upper boundary\par 
\tab - LCBR1 is selected as lower boundary\par 
\par 
\tab Configuration of Channel 3\par 
\tab - the result register3 is selected\par 
\tab - the limit check 0 is selected\par 
\tab - the reference voltage selected is Standard Voltage (Varef)\par 
\tab - the input class selected is Input Class 1\par 
\tab - LCBR0 is selected as upper boundary\par 
\tab - LCBR1 is selected as lower boundary\par 
\par 
\tab Configuration of Channel 4\par 
\tab - the result register3 is selected\par 
\tab - the limit check 0 is selected\par 
\tab - the reference voltage selected is Standard Voltage (Varef)\par 
\tab - the input class selected is Input Class 1\par 
\tab - LCBR0 is selected as upper boundary\par 
\tab - LCBR1 is selected as lower boundary\par 
\par 
\tab Configuration of Channel 5\par 
\tab - the result register3 is selected\par 
\tab - the limit check 0 is selected\par 
\tab - the reference voltage selected is Standard Voltage (Varef)\par 
\tab - the input class selected is Input Class 1\par 
\tab - LCBR0 is selected as upper boundary\par 
\tab - LCBR1 is selected as lower boundary\par 
\par 
\tab Configuration of Channel 8\par 
\tab - the result register3 is selected\par 
\tab - the limit check 0 is selected\par 
\tab - the reference voltage selected is Standard Voltage (Varef)\par 
\tab - the input class selected is Input Class 1\par 
\tab - LCBR0 is selected as upper boundary\par 
\tab - LCBR1 is selected as lower boundary\par 
\par 
\tab Configuration of Channel 9\par 
\tab - the result register3 is selected\par 
\tab - the limit check 0 is selected\par 
\tab - the reference voltage selected is Standard Voltage (Varef)\par 
\tab - the input class selected is Input Class 1\par 
\tab - LCBR0 is selected as upper boundary\par 
\tab - LCBR1 is selected as lower boundary\par 
\par 
\tab Configuration of Channel 10\par 
\tab - the result register3 is selected\par 
\tab - the limit check 0 is selected\par 
\tab - the reference voltage selected is Standard Voltage (Varef)\par 
\tab - the input class selected is Input Class 1\par 
\tab - LCBR0 is selected as upper boundary\par 
\tab - LCBR1 is selected as lower boundary\par 
\par 
\tab Configuration of Channel 11\par 
\tab - the result register3 is selected\par 
\tab - the limit check 0 is selected\par 
\tab - the reference voltage selected is Standard Voltage (Varef)\par 
\tab - the input class selected is Input Class 1\par 
\tab - LCBR0 is selected as upper boundary\par 
\tab - LCBR1 is selected as lower boundary\par 
\par 
\tab Configuration of Channel 13\par 
\tab - the result register3 is selected\par 
\tab - the limit check 0 is selected\par 
\tab - the reference voltage selected is Standard Voltage (Varef)\par 
\tab - the input class selected is Input Class 1\par 
\tab - LCBR0 is selected as upper boundary\par 
\tab - LCBR1 is selected as lower boundary\par 
\par 
\tab Configuration of Channel 15\par 
\tab - the result register3 is selected\par 
\tab - the limit check 0 is selected\par 
\tab - the reference voltage selected is Standard Voltage (Varef)\par 
\tab - the input class selected is Input Class 1\par 
\tab - LCBR0 is selected as upper boundary\par 
\tab - LCBR1 is selected as lower boundary\par 
\par 
\tab Configuration of Sample Time and Resolution:\par 
\par 
\tab 10 bit resolution selected\par 
\par 
\tab 10 bit resolution selected\par 
\par 
\tab Configuration of Result Control Registers:\par 
\tab Configuration of Result Control Register 0\par 
\tab - the data reduction filter is disabled\par 
\tab - the event interrupt is disabled\par 
\tab - the wait-for-read mode is disabled\par 
\tab - the FIFO functionality is disabled\par 
\par 
\tab Configuration of Result Control Register 1\par 
\tab - the data reduction filter is disabled\par 
\tab - the event interrupt is disabled\par 
\tab - the wait-for-read mode is disabled\par 
\tab - the FIFO functionality is disabled\par 
\par 
\tab Configuration of Result Control Register 2\par 
\tab - the data reduction filter is disabled\par 
\tab - the event interrupt is disabled\par 
\tab - the wait-for-read mode is disabled\par 
\tab - the FIFO functionality is disabled\par 
\par 
\tab Configuration of Result Control Register 3\par 
\tab - the data reduction filter is disabled\par 
\tab - the event interrupt is disabled\par 
\tab - the wait-for-read mode is disabled\par 
\tab - the FIFO functionality is disabled\par 
\par 
\tab Configuration of Result Control Register 4\par 
\tab - the data reduction filter is disabled\par 
\tab - the event interrupt is disabled\par 
\tab - the wait-for-read mode is disabled\par 
\tab - the FIFO functionality is disabled\par 
\par 
\tab Configuration of Result Control Register 5\par 
\tab - the data reduction filter is disabled\par 
\tab - the event interrupt is disabled\par 
\tab - the wait-for-read mode is disabled\par 
\tab - the FIFO functionality is disabled\par 
\par 
\tab Configuration of Result Control Register 6\par 
\tab - the data reduction filter is disabled\par 
\tab - the event interrupt is disabled\par 
\tab - the wait-for-read mode is disabled\par 
\tab - the FIFO functionality is disabled\par 
\par 
\tab Configuration of Result Control Register 7\par 
\tab - the data reduction filter is disabled\par 
\tab - the event interrupt is disabled\par 
\tab - the wait-for-read mode is disabled\par 
\tab - the FIFO functionality is disabled\par 
\par 
\tab Configuration of Channel Interrupt Node Pointer Register:\par 
\tab - the SR0 line become activated if channel 0 interrupt is generated\par 
\tab - the SR0 line become activated if channel 2 interrupt is generated\par 
\tab - the SR0 line become activated if channel 3 interrupt is generated\par 
\par 
\tab - the SR0 line become activated if channel 4 interrupt is generated\par 
\tab - the SR0 line become activated if channel 5 interrupt is generated\par 
\par 
\tab - the SR0 line become activated if channel 8 interrupt is generated\par 
\tab - the SR0 line become activated if channel 9 interrupt is generated\par 
\tab - the SR0 line become activated if channel 10 interrupt is generated\par 
\tab - the SR0 line become activated if channel 11 interrupt is generated\par 
\par 
\tab - the SR0 line become activated if channel 13 interrupt is generated\par 
\tab - the SR0 line become activated if channel 15 interrupt is generated\par 
\par 
\tab Configuration of Event Interrupt Node Pointer Register for Source\par 
\tab Interrupts:\par 
\tab - the SR 0 line become activated if the event 0 interrupt is generated\par 
\tab - the SR 0 line become activated if the event 2 interrupt is generated\par 
\par 
\tab Configuration of Event Interrupt Node Pointer Register for Result\par 
\tab Interrupts:\par 
\par 
\tab Configuration of Service Request Nodes 0 - 3 :\par 
\par 
\tab Configuration of Limit Check Boundary:\par 
\par 
\tab Configuration of Gating source and External Trigger Control:\par 
\tab - No Gating source selected for Arbitration Source 0\par 
\par 
\tab - the trigger input selection is not enabled for source 0\par 
\par 
\tab - No Gating source selected for Arbitration Source 1\par 
\par 
\tab - the trigger input TRSEL selection is not enabled for Source 1\par 
\par 
\tab - No Gating source selected for Arbitration Source 2\par 
\par 
\tab - the trigger input TRSEL selection is not enabled for Source 2\par 
\par 
\tab Configuration of Conversion Queue Mode Register:Sequential Source 0\par 
\tab - the gating line is permanently Enabled\par 
\tab - the external trigger is disabled\par 
\par 
\tab Configuration of Conversion Queue Mode Register:Sequential Source 2\par 
\tab - the gating line is permanently Enabled\par 
\tab - the external trigger is disabled\par 
\par 
\tab Configuration of Conversion Request Mode Registers:Parallel Source\par 
\tab - the gating line is permanently Disabled\par 
\tab - the external trigger is disabled\par 
\tab - the source interrupt is disabled\par 
\tab - the autoscan functionality is disabled\par 
\par 
\tab Configuration of Synchronisation Registers:\par 
\tab - ADC0 is master\par 
\par 

\par \plain\f4\fs20\cf0
\par \plain\f4\fs28\cf0\ul Analog / Digital Converter (ADC1)
\par
\par \plain\f4\fs24\cf0 Macros:\f4\fs20\cf0
\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab uword ADC1_uwBusy()\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro checks the conversion state of the current ADC

\par \tab \tab channel by examination of the busy flag (BUSY).It returns

\par \tab \tab '1' while a conversion is running.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b Returns a 1 if A/D converter is active, else 0\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab void ADC1_vSetSeq2QueueFlush()\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro Flushes the Sequential source 2 Queue

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab uword ADC1_uwGetSeq2QueueEmpty()\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro checks whether Sequential source 2 Queue depth

\par \tab \tab is empty or not

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b Returns '1' if sequential 2 queue is empty, else '0'\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab uword ADC1_uwGetResultData(RegNum)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro returns the left aligned, 10-bit result data of

\par \tab \tab the last conversion from requested result register

\par \tab \tab Ex- RegNum = RESULT_REG_0,for Result register 0

\par \tab \tab RegNum = RESULT_REG_2,for Result register 2

\par \tab \tab - For 8 bit resolution user has to right shift the result

\par \tab \tab by 2 bits as shown below

\par \tab \tab uwResult = ADC0_uwGetResultData(RESULT_REG_0);

\par \tab \tab uwResult >>= 2;

\par \tab \tab NOTE -

\par \tab \tab If this macro is called before ADC1_uwGetResultChNum macro

\par \tab \tab for the same result register then channel information will

\par \tab \tab be lost.So always call ADC1_uwGetResultChNum macro before

\par \tab \tab this macro if channel information is required.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b Returns result data from requested result register\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab RegNum:

\par \tab \tab RegNum: defines the result register number

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab ubyte ADC1_ubGetResultChNum(RegNum)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro returns channel number from requested result

\par \tab \tab register

\par \tab \tab Ex- RegNum = RESULT_REG_0,for Result register 0

\par \tab \tab RegNum = RESULT_REG_2,for Result register 2

\par \tab \tab NOTE -

\par \tab \tab If only channel information is required then make sure that

\par \tab \tab you call ADC1_vClearValidBit macro after reading the

\par \tab \tab channel number.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b Returns channel number from requested result register\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab RegNum:

\par \tab \tab RegNum: defines the result register number

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab uword ADC1_uwResultValid(RegNum)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro indicates that the contents of the result

\par \tab \tab register x is valid or not valid.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b 1 for valid and 0 for not valid\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab RegNum:

\par \tab \tab RegNum: defines the result register number

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab ubyte ADC1_ubGetResultStatusChNum()\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro returns the channel number of latest result

\par \tab \tab register(view without extension 'V') that has been read out.

\par \tab \tab NOTE : This macro has to be called only after reading the

\par \tab \tab channel Result data.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b Channel number\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab void ADC1_vClearValidBit(RegNum)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro clears valid bit flag for the requested result

\par \tab \tab register

\par \tab \tab Ex- RegNum = RESULT_REG_0,for Result register 0

\par \tab \tab RegNum = RESULT_REG_2,for Result register 2

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab RegNum:

\par \tab \tab RegNum: defines the result register number

\par \plain\f4\fs24\cf0 Functions:\f4\fs20\cf0
\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void ADC1_vInit(void)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This is the initialization function of the ADC function

\par \tab \tab library. It is assumed that the SFRs used by this library

\par \tab \tab are in reset state.

\par \tab \tab Following SFR fields will be initialized:

\par \tab \tab GLOBCTR  - Global Control

\par \tab \tab RSPR0    - Priority and Arbitration Register

\par \tab \tab ASENR    - Arbitration slot enable register

\par \tab \tab CHCTRx   - Channel Control Register x

\par \tab \tab RCRx     - Result Control Register x

\par \tab \tab KSCFG    - Module configuration Register

\par \tab \tab INPCR    - Input class Registers

\par \tab \tab CHINPRx  - Channel Interrupt register

\par \tab \tab EVINPRx  - Event Interrupt register

\par \tab \tab SYNCTR   - Synchronisation control register

\par \tab \tab LCBRx    - Limit check boundary register

\par \tab \tab PISEL    - Port input selection

\par \tab \tab QMR0     - Sequential 0 mode register

\par \tab \tab CRMR1    - Parallel mode register

\par \tab \tab QMR2     - Sequential 2 mode register

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void ADC1_vStartSeq0ReqChNum(ubyte ubExtTrg, ubyte\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This function starts the conversion of the requested

\par \tab \tab channel.

\par \tab \tab NOTE -

\par \tab \tab Before passing ubEnIntr argument as 1,make sure that Seq 0

\par \tab \tab source interrupt is enabled.

\par \tab \tab External Trigger -> 0,Indicates software trigger

\par \tab \tab (Conversion starts once this function is executed)

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab ubExtTrg:

\par \tab \tab External Trigger : defines external trigger.

\par \tab \tab ubEnIntr:

\par \tab \tab Enable Source Interrupt : defines source interrupt

\par \tab \tab ubRFill:

\par \tab \tab Refill : defines the refill

\par \tab \tab ubChannelNum:

\par \tab \tab Channel number : Name of the Request Channel Number (0 -

\par \tab \tab 7)- see macros defined in the header file

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void ADC1_vStartSeq2ReqChNum(ubyte ubExtTrg, ubyte\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This function starts the conversion of the requested

\par \tab \tab channel.

\par \tab \tab NOTE -

\par \tab \tab Before passing ubEnIntr argument as 1,make sure that Seq 2

\par \tab \tab source interrupt is enabled.

\par \tab \tab External Trigger -> 0,Indicates software trigger

\par \tab \tab (Conversion starts once this function is executed)

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab ubExtTrg:

\par \tab \tab External Trigger : defines external trigger.

\par \tab \tab ubEnIntr:

\par \tab \tab Enable Source Interrupt : defines source interrupt

\par \tab \tab ubRFill:

\par \tab \tab Refill : defines the refill

\par \tab \tab ubChannelNum:

\par \tab \tab Channel number : Name of the Request Channel Number (0 -

\par \tab \tab 7)- see macros defined in the header file

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void ADC1_vAliasChNum(ubyte ubAliasChNum, ubyte ubReqChNum)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This function assigns attributes of channel0 or channel1 to

\par \tab \tab the requested channel

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab ubAliasChNum:

\par \tab \tab AliasChNum: defines the Alias channel number (Ch0 and Ch1)

\par \tab \tab ubReqChNum:

\par \tab \tab ReqChNum: defines the channel number to be aliased

\par
\par \plain\f4\fs24\cf0 Initialization:
\par \plain\f4\fs20\cf0\b
\par
\tab Configure global control register:\par 
\tab --- Conversion Timing -----------------\par 
\tab - Conversion time (CTC) = 00.85 us\par 
\tab - Analog clock is 1/4th of module clock and digital clock is 1/1 times\par 
\tab of module clock\par 
\par 
\tab - the permanent arbitration mode is selected\par 
\par 
\tab Configuration of Arbitration Slot enable register and also the Source\par 
\tab Priority register:\par 
\tab - Arbitration Slot 0 is enabled\par 
\tab - Arbitration Slot 1 is disabled\par 
\tab - Arbitration Slot 2 is enabled\par 
\tab - the priority of request source 0 is 2\par 
\tab - the wait-for-start mode is selected for source 0\par 
\tab - the priority of request source 1 is low\par 
\tab - the wait-for-start mode is selected for source 1\par 
\tab - the priority of request source 2 is high\par 
\tab - the wait-for-start mode is selected for source 2\par 
\par 
\tab Configuration of Channel Control Registers:\par 
\tab Configuration of Channel 0\par 
\tab - the result register0 is selected\par 
\tab - the limit check 0 is selected\par 
\tab - the reference voltage selected is Standard Voltage (Varef)\par 
\tab - the input class selected is Input Class 1\par 
\tab - LCBR0 is selected as upper boundary\par 
\tab - LCBR1 is selected as lower boundary\par 
\par 
\tab Configuration of Channel 2\par 
\tab - the result register1 is selected\par 
\tab - the limit check 0 is selected\par 
\tab - the reference voltage selected is Standard Voltage (Varef)\par 
\tab - the input class selected is Input Class 1\par 
\tab - LCBR0 is selected as upper boundary\par 
\tab - LCBR1 is selected as lower boundary\par 
\par 
\tab Configuration of Channel 4\par 
\tab - the result register3 is selected\par 
\tab - the limit check 0 is selected\par 
\tab - the reference voltage selected is Standard Voltage (Varef)\par 
\tab - the input class selected is Input Class 1\par 
\tab - LCBR0 is selected as upper boundary\par 
\tab - LCBR1 is selected as lower boundary\par 
\par 
\tab Configuration of Sample Time and Resolution:\par 
\par 
\tab 10 bit resolution selected\par 
\par 
\tab 10 bit resolution selected\par 
\par 
\tab Configuration of Result Control Registers:\par 
\tab Configuration of Result Control Register 0\par 
\tab - the data reduction filter is disabled\par 
\tab - the event interrupt is disabled\par 
\tab - the wait-for-read mode is disabled\par 
\tab - the FIFO functionality is disabled\par 
\par 
\tab Configuration of Result Control Register 1\par 
\tab - the data reduction filter is disabled\par 
\tab - the event interrupt is disabled\par 
\tab - the wait-for-read mode is disabled\par 
\tab - the FIFO functionality is disabled\par 
\par 
\tab Configuration of Result Control Register 2\par 
\tab - the data reduction filter is disabled\par 
\tab - the event interrupt is disabled\par 
\tab - the wait-for-read mode is disabled\par 
\tab - the FIFO functionality is disabled\par 
\par 
\tab Configuration of Result Control Register 3\par 
\tab - the data reduction filter is disabled\par 
\tab - the event interrupt is disabled\par 
\tab - the wait-for-read mode is disabled\par 
\tab - the FIFO functionality is disabled\par 
\par 
\tab Configuration of Result Control Register 4\par 
\tab - the data reduction filter is disabled\par 
\tab - the event interrupt is disabled\par 
\tab - the wait-for-read mode is disabled\par 
\tab - the FIFO functionality is disabled\par 
\par 
\tab Configuration of Result Control Register 5\par 
\tab - the data reduction filter is disabled\par 
\tab - the event interrupt is disabled\par 
\tab - the wait-for-read mode is disabled\par 
\tab - the FIFO functionality is disabled\par 
\par 
\tab Configuration of Result Control Register 6\par 
\tab - the data reduction filter is disabled\par 
\tab - the event interrupt is disabled\par 
\tab - the wait-for-read mode is disabled\par 
\tab - the FIFO functionality is disabled\par 
\par 
\tab Configuration of Result Control Register 7\par 
\tab - the data reduction filter is disabled\par 
\tab - the event interrupt is disabled\par 
\tab - the wait-for-read mode is disabled\par 
\tab - the FIFO functionality is disabled\par 
\par 
\tab Configuration of Channel Interrupt Node Pointer Register:\par 
\tab - the SR0 line become activated if channel 0 interrupt is generated\par 
\tab - the SR0 line become activated if channel 2 interrupt is generated\par 
\par 
\tab - the SR0 line become activated if channel 4 interrupt is generated\par 
\par 
\tab Configuration of Event Interrupt Node Pointer Register for Source\par 
\tab Interrupts:\par 
\tab - the SR 0 line become activated if the event 0 interrupt is generated\par 
\tab - the SR 0 line become activated if the event 2 interrupt is generated\par 
\par 
\tab Configuration of Event Interrupt Node Pointer Register for Result\par 
\tab Interrupts:\par 
\par 
\tab Configuration of Service Request Nodes 0 - 3 :\par 
\par 
\tab Configuration of Limit Check Boundary:\par 
\par 
\tab Configuration of Gating source and External Trigger Control:\par 
\tab - No Gating source selected for Arbitration Source 0\par 
\par 
\tab - the trigger input selection is not enabled for source 0\par 
\par 
\tab - No Gating source selected for Arbitration Source 1\par 
\par 
\tab - the trigger input TRSEL selection is not enabled for Source 1\par 
\par 
\tab - No Gating source selected for Arbitration Source 2\par 
\par 
\tab - the trigger input TRSEL selection is not enabled for Source 2\par 
\par 
\tab Configuration of Conversion Queue Mode Register:Sequential Source 0\par 
\tab - the gating line is permanently Enabled\par 
\tab - the external trigger is disabled\par 
\par 
\tab Configuration of Conversion Queue Mode Register:Sequential Source 2\par 
\tab - the gating line is permanently Enabled\par 
\tab - the external trigger is disabled\par 
\par 
\tab Configuration of Conversion Request Mode Registers:Parallel Source\par 
\tab - the gating line is permanently Disabled\par 
\tab - the external trigger is disabled\par 
\tab - the source interrupt is disabled\par 
\tab - the autoscan functionality is disabled\par 
\par 
\tab Configuration of Synchronisation Registers:\par 
\tab -ADC1 is slave\par 
\par 

\par \plain\f4\fs20\cf0
\par \plain\f4\fs28\cf0\ul Real Time Clock (RTC)
\par
\par \plain\f4\fs24\cf0 Macros:\f4\fs20\cf0
\par \plain\f4\fs24\cf0 Functions:\f4\fs20\cf0
\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void RTC_vInit(void)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This is the initialization function of the RTC function

\par \tab \tab library. It is assumed that the SFRs used by this library

\par \tab \tab are in reset state.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void RTC_viRTC(void)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This is the RTC interrupt service routine. It is called up

\par \tab \tab when:

\par \tab \tab - counter T14 overflows and is reloaded

\par \tab \tab - counter CNT0 overflows and is reloaded

\par \tab \tab - counter CNT1 overflows and is reloaded

\par \tab \tab - counter CNT2 overflows and is reloaded

\par \tab \tab - counter CNT3 overflows and is reloaded

\par \tab \tab This interrupt request may eg. be used to provide a system

\par \tab \tab time tick independent of the CPU frequency, or to wake up

\par \tab \tab regularly from idle mode.

\par \tab \tab Please note that you have to add application specific code

\par \tab \tab to this function.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs24\cf0 Initialization:
\par \plain\f4\fs20\cf0\b
\par
\tab Configuration of the RTC Kernal\par 
\par 
\tab Configuration of the RTC Counter:\par 
\tab - RTC input frequency is 8000.000 kHz\par 
\tab - the input clock is not divided\par 
\tab - the input clock is not divided\par 
\tab - counter is started after initialization\par 
\tab - RTC count clock frequency is 8000.000 kHz\par 
\par 
\tab - overflow period on T14:  1.0000 [ms]\par 
\tab - overflow period on CNT0: 1.0240 [s]\par 
\tab - overflow period on CNT1: 1.0923 [min]\par 
\tab - overflow period on CNT2: 1.1651 [h]\par 
\tab - overflow period on CNT3: 1.6570 [months]\par 
\par 
\tab Configuration of the used RTC Interrupts:\par 
\tab RTC service request node configuration:\par 
\tab - RTC interrupt priority level (ILVL) = 5\par 
\tab - RTC interrupt group level (GLVL) = 0\par 
\tab - RTC group priority extension (GPX) = 0\par 
\par 

\par \plain\f4\fs20\cf0
\par \plain\f4\fs28\cf0\ul MultiCAN Module (CAN)
\par
\par \plain\f4\fs24\cf0 Macros:\f4\fs20\cf0
\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab CAN_ubNewData(ObjNr)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This function checks whether the selected RECEIVE OBJECT

\par \tab \tab has received a new message. If so the function returns the

\par \tab \tab value '1'.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b 1 the message object has received a new message, else 0\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab ObjNr:

\par \tab \tab Number of the message object (0-63)

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab CAN_ubGetRxErrorCounter(NodeNr)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro returns the current value of the receive error

\par \tab \tab counter of the selected node.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b Value of the receive error counter\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab NodeNr:

\par \tab \tab Number of the node (0-2)

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab CAN_ubGetTxErrorCounter(NodeNr)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro returns the current value of the transmit error

\par \tab \tab counter of the selected node.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b Value of the transmit error counter\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab NodeNr:

\par \tab \tab Number of the node (0-2)

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab CAN_ubGetErrorTransferDirection(NodeNr)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro returns the current value of the Last Error

\par \tab \tab Transfer Direction flag. 0 indicates that the last error

\par \tab \tab occurred while the selected CAN node was receiving a

\par \tab \tab message. The receive error counter has been incremented. 1

\par \tab \tab indicates that the last error occurred while the selected

\par \tab \tab CAN node was transmitting a message. The transmit error

\par \tab \tab counter has been incremented.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b 0 receive error, else transmit error\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab NodeNr:

\par \tab \tab Number of the node (0-2)

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab CAN_ubGetErrorIncrement(NodeNr)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro returns the current value of the Last Error

\par \tab \tab Increment flag. If the Bit Stream Processor itself detects

\par \tab \tab an error while a transmit operation is running, the

\par \tab \tab Transmit Error Counter is incremented by 8. An increment of

\par \tab \tab 1 is used, when the error condition was reported by an

\par \tab \tab external CAN node via an error frame generation.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b 0 counter is incrementd by 1, counter is incremented by 8\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab NodeNr:

\par \tab \tab Number of the node (0-2)

\par \plain\f4\fs24\cf0 Functions:\f4\fs20\cf0
\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void CAN_vInit(void)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This is the initialization function of the CAN function

\par \tab \tab library. It is assumed that the SFRs used by this library

\par \tab \tab are in reset state.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void CAN_vTransmit(ubyte ubObjNr)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This function triggers the CAN controller to send the

\par \tab \tab selected message.

\par \tab \tab If the selected message object is a TRANSMIT OBJECT then

\par \tab \tab this function triggers the sending of a data frame. If

\par \tab \tab however the selected message object is a RECEIVE OBJECT

\par \tab \tab this function triggers the sending of a remote frame.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab ubObjNr:

\par \tab \tab Number of the message object (0-63)

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void CAN_vConfigMsgObj(ubyte ubObjNr, stCAN_SWObj *pstObj)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This function sets up the message objects. This includes

\par \tab \tab the 8 data bytes, the identifier (11- or 29-bit), the

\par \tab \tab acceptance mask (11- or 29-bit), the data number (0-8

\par \tab \tab bytes), the DIR-bit (transmit or receive object), the

\par \tab \tab IDE-bit (standard or extended  identifier), the MIDE-bit

\par \tab \tab (accepts reception of both frames or matching IDE-bit

\par \tab \tab frame) and  the frame counter value.

\par \tab \tab The message is not sent; for this the function

\par \tab \tab CAN_vTransmit must be called.

\par \tab \tab The structure of the SW message object is defined in the

\par \tab \tab header file CAN.h (see stCAN_SWObj).

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab ubObjNr:

\par \tab \tab Number of the message object to be configured (0-63)

\par \tab \tab *pstObj:

\par \tab \tab Pointer on a message object

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void CAN_vLoadData(ubyte ubObjNr, ubyte *ubpubData)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab If a hardware TRANSMIT OBJECT has to be loaded with data

\par \tab \tab but not with a new identifier, this function may be used

\par \tab \tab instead of the function CAN_vConfigMsgObj. The message

\par \tab \tab object should be accessed by calling the function

\par \tab \tab CAN_ubRequestMsgObj before calling this function. This

\par \tab \tab prevents the CAN controller from working with invalid data.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab ubObjNr:

\par \tab \tab Number of the message object to be configured (0-63)

\par \tab \tab *ubpubData:

\par \tab \tab Pointer on a data buffer

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void Can_Init(void)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This is the initialization function of the CAN_LLD function

\par \tab \tab library. It is assumed that the SFRs used by this library

\par \tab \tab are in reset state.

\par \tab \tab The Function CAN_vInit() is called to Initialize as per

\par \tab \tab DAvE Configuration.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab ubyte Can_SetControllerMode(ubyte Controller,\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This function performs software triggered state transition

\par \tab \tab of the CAN Contrller state machine.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b 1 if transition success, else 0\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab Controller:

\par \tab \tab CAN Controller for which the state shall be changed

\par \tab \tab Transition. Number of node ( 0 - 3)

\par \tab \tab Transition:

\par \tab \tab Transition - Transition requested.The following definitions

\par \tab \tab for TimerNr are available: CAN_T_START, CAN_T_STOP,

\par \tab \tab CAN_T_SLEEP, CAN_T_WAKEUP

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void Can_lInitializeController(const ubyte Controller,\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This function (re-)initialization of CAN Controller.

\par \tab \tab NOTE: The generated configurations are as per DAvE Node

\par \tab \tab Configuration

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab Controller:

\par \tab \tab CAN Controller to be initialized. Number of node ( 0 - 3)

\par \tab \tab Config:

\par \tab \tab Config - controller configuration.

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void Can_EnableControllerInterrupts(ubyte Controller)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This function enables CAN Node interrupts which are

\par \tab \tab configured in DAvE.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab Controller:

\par \tab \tab CAN Controller for which interrupts shall be enabled.

\par \tab \tab Number of node ( 0 - 3)

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void Can_DisableControllerInterrupts(ubyte Controller)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This function disables CAN Node interrupts which are

\par \tab \tab configured in DAvE.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab Controller:

\par \tab \tab CAN Controller for which interrupts shall be disabled.

\par \tab \tab Number of node ( 0 - 3)

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab CAN_viSRN0()\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab 

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b \plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs24\cf0 Initialization:
\par \plain\f4\fs20\cf0\b
\par
\tab Configuration of Kernel State Configuration Register:\par 
\tab - Enable the CAN module(MODEN)\par 
\tab - Enable Bit Protection for MODEN\par 
\par 
\tab Configuration of the Module Clock:\par 
\tab - the CAN module clock = 40.00 MHz\par 
\tab - Normal divider mode selected\par 
\par 
\tab Panel Control\par 
\tab - wait until Panel has finished the initialisation\par 
\par 
\tab Configuration of CAN Node 0:\par 
\par 
\tab General Configuration of the Node 0:\par 
\tab - set INIT and CCE\par 
\par 
\tab - load NODE 0 interrupt pointer register\par 
\par 
\tab Configuration of the used CAN Port Pins:\par 
\tab - Loop-back mode is disabled\par 
\tab - P2.0 is used for CAN0 Receive input(RXDC0C)\par 
\tab - P2.1 is used for CAN0 Transmit output(TXDC0C)\par 
\par 
\tab Configuration of the Node 0 Baud Rate:\par 
\tab - required baud rate = 500.000 kbaud\par 
\tab - real baud rate     = 500.000 kbaud\par 
\tab - sample point       = 60.00 %\par 
\tab - there are 5 time quanta before sample point\par 
\tab - there are 4 time quanta after sample point\par 
\tab - the (re)synchronization jump width is 2 time quanta\par 
\par 
\tab Configuration of the Node 0 Error Counter:\par 
\tab - the error warning threshold value (warning level) is 96\par 
\par 
\tab Configuration of the Frame Counter:\par 
\tab - Frame Counter Mode: the counter is incremented upon the reception\par 
\tab and transmission of frames\par 
\tab - frame counter: 0x0000\par 
\par 
\tab Configuration of CAN Node 1:\par 
\par 
\tab General Configuration of the Node 1:\par 
\tab - set INIT and CCE\par 
\par 
\tab - load NODE 1 interrupt pointer register\par 
\par 
\tab Configuration of the used CAN Port Pins:\par 
\tab - Loop-back mode is disabled\par 
\tab - P2.4 is used for CAN1 Receive input(RXDC1A)\par 
\tab - P2.2 is used for CAN1 Transmit output(TXDC1B)\par 
\par 
\tab Configuration of the Node 1 Baud Rate:\par 
\tab - required baud rate = 500.000 kbaud\par 
\tab - real baud rate     = 500.000 kbaud\par 
\tab - sample point       = 60.00 %\par 
\tab - there are 5 time quanta before sample point\par 
\tab - there are 4 time quanta after sample point\par 
\tab - the (re)synchronization jump width is 2 time quanta\par 
\par 
\tab Configuration of the Node 1 Error Counter:\par 
\tab - the error warning threshold value (warning level) is 96\par 
\par 
\tab Configuration of the Frame Counter:\par 
\tab - Frame Counter Mode: the counter is incremented upon the reception\par 
\tab and transmission of frames\par 
\tab - frame counter: 0x0000\par 
\par 
\tab Configuration of CAN Node 2:\par 
\par 
\tab General Configuration of the Node 2:\par 
\tab - set INIT and CCE\par 
\par 
\tab Configuration of the CAN Message Object List Structure:\par 
\par 
\tab Allocate MOs for list 1:\par 
\par 
\tab Allocate MOs for list 2:\par 
\par 
\tab Configuration of the CAN Message Objects 0 - 63:\par 
\tab Configuration of Message Object 0:\par 
\tab MO 0 is named as : Message Object 0\par 
\par 
\tab General Configuration of the Message Object 0 :\par 
\tab - message object 0 is valid\par 
\tab - message object is used as receive object\par 
\tab - this message object is assigned to list 1 (node 0)\par 
\par 
\tab Configuration of Message Object 0 Arbitration:\par 
\tab - priority class 2; transmit acceptance filtering is based on the CAN\par 
\tab identifier\par 
\tab - standard 11-bit identifier\par 
\tab - identifier 11-bit:      0x6F0\par 
\par 
\tab Configuration of Message Object 0 acceptance mask:\par 
\tab - only accept receive frames with matching IDE bit\par 
\tab - acceptance mask 11-bit: 0x000\par 
\par 
\tab Configuration of Message Object 0 interrupt pointer:\par 
\tab - use message pending register 0 bit position 0\par 
\tab - receive interrupt node pointer: MultiCAN SRN 0\par 
\par 
\tab Configuration of Message Object 0 FIFO/Gateway pointer:\par 
\par 
\tab Configuration of Message Object 0 Function control:\par 
\tab - this object is a STANDARD MESSAGE OBJECT\par 
\tab - 8 valid data bytes\par 
\tab - enable receive interrupt; bit RXPND is set after successful\par 
\tab reception of a frame\par 
\par 
\tab Configuration of Message Object 1:\par 
\tab MO 1 is named as : Message Object 1\par 
\par 
\tab General Configuration of the Message Object 1 :\par 
\tab - message object 1 is valid\par 
\tab - message object is used as receive object\par 
\tab - this message object is assigned to list 2 (node 1)\par 
\par 
\tab Configuration of Message Object 1 Arbitration:\par 
\tab - priority class 2; transmit acceptance filtering is based on the CAN\par 
\tab identifier\par 
\tab - standard 11-bit identifier\par 
\tab - identifier 11-bit:      0x6F1\par 
\par 
\tab Configuration of Message Object 1 acceptance mask:\par 
\tab - only accept receive frames with matching IDE bit\par 
\tab - acceptance mask 11-bit: 0x000\par 
\par 
\tab Configuration of Message Object 1 interrupt pointer:\par 
\tab - use message pending register 0 bit position 1\par 
\par 
\tab Configuration of Message Object 1 FIFO/Gateway pointer:\par 
\par 
\tab Configuration of Message Object 1 Function control:\par 
\tab - this object is a STANDARD MESSAGE OBJECT\par 
\tab - 8 valid data bytes\par 
\par 
\tab Configuration of Message Object 2:\par 
\tab MO 2 is named as : Message Object 2\par 
\par 
\tab General Configuration of the Message Object 2 :\par 
\tab - message object 2 is valid\par 
\tab - message object is used as transmit object\par 
\tab - this message object is assigned to list 1 (node 0)\par 
\par 
\tab Configuration of Message Object 2 Arbitration:\par 
\tab - priority class 2; transmit acceptance filtering is based on the CAN\par 
\tab identifier\par 
\tab - standard 11-bit identifier\par 
\tab - identifier 11-bit:      0x035\par 
\par 
\tab Configuration of Message Object 2 Data:\par 
\par 
\tab Configuration of Message Object 2 acceptance mask:\par 
\tab - only accept receive frames with matching IDE bit\par 
\tab - acceptance mask 11-bit: 0x7F1\par 
\par 
\tab Configuration of Message Object 2 interrupt pointer:\par 
\tab - use message pending register 0 bit position 2\par 
\par 
\tab Configuration of Message Object 2 FIFO/Gateway pointer:\par 
\par 
\tab Configuration of Message Object 2 Function control:\par 
\tab - this object is a STANDARD MESSAGE OBJECT\par 
\tab - 8 valid data bytes\par 
\par 
\tab Configuration of Message Object 3:\par 
\tab MO 3 is named as : Message Object 3\par 
\par 
\tab General Configuration of the Message Object 3 :\par 
\tab - message object 3 is valid\par 
\tab - message object is used as receive object\par 
\tab - this message object is assigned to list 1 (node 0)\par 
\par 
\tab Configuration of Message Object 3 Arbitration:\par 
\tab - priority class 2; transmit acceptance filtering is based on the CAN\par 
\tab identifier\par 
\tab - standard 11-bit identifier\par 
\tab - identifier 11-bit:      0x035\par 
\par 
\tab Configuration of Message Object 3 acceptance mask:\par 
\tab - only accept receive frames with matching IDE bit\par 
\tab - acceptance mask 11-bit: 0x7FF\par 
\par 
\tab Configuration of Message Object 3 interrupt pointer:\par 
\tab - use message pending register 0 bit position 3\par 
\par 
\tab Configuration of Message Object 3 FIFO/Gateway pointer:\par 
\par 
\tab Configuration of Message Object 3 Function control:\par 
\tab - this object is a STANDARD MESSAGE OBJECT\par 
\tab - 8 valid data bytes\par 
\par 
\tab Configuration of Message Object 4:\par 
\tab MO 4 is named as : Message Object 4\par 
\par 
\tab General Configuration of the Message Object 4 :\par 
\tab - message object 4 is valid\par 
\tab - message object is used as transmit object\par 
\tab - this message object is assigned to list 1 (node 0)\par 
\par 
\tab Configuration of Message Object 4 Arbitration:\par 
\tab - priority class 2; transmit acceptance filtering is based on the CAN\par 
\tab identifier\par 
\tab - standard 11-bit identifier\par 
\tab - identifier 11-bit:      0x000\par 
\par 
\tab Configuration of Message Object 4 Data:\par 
\par 
\tab Configuration of Message Object 4 acceptance mask:\par 
\tab - only accept receive frames with matching IDE bit\par 
\tab - acceptance mask 11-bit: 0x7FF\par 
\par 
\tab Configuration of Message Object 4 interrupt pointer:\par 
\tab - use message pending register 0 bit position 4\par 
\par 
\tab Configuration of Message Object 4 FIFO/Gateway pointer:\par 
\par 
\tab Configuration of Message Object 4 Function control:\par 
\tab - this object is a STANDARD MESSAGE OBJECT\par 
\tab - 8 valid data bytes\par 
\par 
\tab Configuration of Message Object 5:\par 
\tab MO 5 is named as : Message Object 5\par 
\par 
\tab General Configuration of the Message Object 5 :\par 
\tab - message object 5 is valid\par 
\tab - message object is used as transmit object\par 
\tab - this message object is assigned to list 1 (node 0)\par 
\par 
\tab Configuration of Message Object 5 Arbitration:\par 
\tab - priority class 2; transmit acceptance filtering is based on the CAN\par 
\tab identifier\par 
\tab - standard 11-bit identifier\par 
\tab - identifier 11-bit:      0x000\par 
\par 
\tab Configuration of Message Object 5 Data:\par 
\par 
\tab Configuration of Message Object 5 acceptance mask:\par 
\tab - only accept receive frames with matching IDE bit\par 
\tab - acceptance mask 11-bit: 0x7FF\par 
\par 
\tab Configuration of Message Object 5 interrupt pointer:\par 
\tab - use message pending register 0 bit position 5\par 
\par 
\tab Configuration of Message Object 5 FIFO/Gateway pointer:\par 
\par 
\tab Configuration of Message Object 5 Function control:\par 
\tab - this object is a STANDARD MESSAGE OBJECT\par 
\tab - 8 valid data bytes\par 
\par 
\tab Configuration of Message Object 6:\par 
\tab MO 6 is named as : Message Object 6\par 
\par 
\tab General Configuration of the Message Object 6 :\par 
\tab - message object 6 is valid\par 
\tab - message object is used as transmit object\par 
\tab - this message object is assigned to list 1 (node 0)\par 
\par 
\tab Configuration of Message Object 6 Arbitration:\par 
\tab - priority class 2; transmit acceptance filtering is based on the CAN\par 
\tab identifier\par 
\tab - standard 11-bit identifier\par 
\tab - identifier 11-bit:      0x000\par 
\par 
\tab Configuration of Message Object 6 Data:\par 
\par 
\tab Configuration of Message Object 6 acceptance mask:\par 
\tab - only accept receive frames with matching IDE bit\par 
\tab - acceptance mask 11-bit: 0x7FF\par 
\par 
\tab Configuration of Message Object 6 interrupt pointer:\par 
\tab - use message pending register 0 bit position 6\par 
\par 
\tab Configuration of Message Object 6 FIFO/Gateway pointer:\par 
\par 
\tab Configuration of Message Object 6 Function control:\par 
\tab - this object is a STANDARD MESSAGE OBJECT\par 
\tab - 0 valid data bytes\par 
\par 
\tab Configuration of Message Object 7:\par 
\tab MO 7 is named as : Message Object 7\par 
\par 
\tab General Configuration of the Message Object 7 :\par 
\tab - message object 7 is valid\par 
\tab - message object is used as transmit object\par 
\tab - this message object is assigned to list 1 (node 0)\par 
\par 
\tab Configuration of Message Object 7 Arbitration:\par 
\tab - priority class 2; transmit acceptance filtering is based on the CAN\par 
\tab identifier\par 
\tab - standard 11-bit identifier\par 
\tab - identifier 11-bit:      0x000\par 
\par 
\tab Configuration of Message Object 7 Data:\par 
\par 
\tab Configuration of Message Object 7 acceptance mask:\par 
\tab - only accept receive frames with matching IDE bit\par 
\tab - acceptance mask 11-bit: 0x7FF\par 
\par 
\tab Configuration of Message Object 7 interrupt pointer:\par 
\tab - use message pending register 0 bit position 7\par 
\par 
\tab Configuration of Message Object 7 FIFO/Gateway pointer:\par 
\par 
\tab Configuration of Message Object 7 Function control:\par 
\tab - this object is a STANDARD MESSAGE OBJECT\par 
\tab - 0 valid data bytes\par 
\par 
\tab Configuration of Message Object 8:\par 
\tab MO 8 is named as : Message Object 8\par 
\par 
\tab General Configuration of the Message Object 8 :\par 
\tab - message object 8 is valid\par 
\tab - message object is used as transmit object\par 
\tab - this message object is assigned to list 1 (node 0)\par 
\par 
\tab Configuration of Message Object 8 Arbitration:\par 
\tab - priority class 2; transmit acceptance filtering is based on the CAN\par 
\tab identifier\par 
\tab - standard 11-bit identifier\par 
\tab - identifier 11-bit:      0x000\par 
\par 
\tab Configuration of Message Object 8 Data:\par 
\par 
\tab Configuration of Message Object 8 acceptance mask:\par 
\tab - only accept receive frames with matching IDE bit\par 
\tab - acceptance mask 11-bit: 0x7FF\par 
\par 
\tab Configuration of Message Object 8 interrupt pointer:\par 
\tab - use message pending register 0 bit position 8\par 
\par 
\tab Configuration of Message Object 8 FIFO/Gateway pointer:\par 
\par 
\tab Configuration of Message Object 8 Function control:\par 
\tab - this object is a STANDARD MESSAGE OBJECT\par 
\tab - 0 valid data bytes\par 
\par 
\tab Configuration of Message Object 9:\par 
\tab MO 9 is named as : Message Object 9\par 
\par 
\tab General Configuration of the Message Object 9 :\par 
\tab - message object 9 is valid\par 
\tab - message object is used as transmit object\par 
\tab - this message object is assigned to list 1 (node 0)\par 
\par 
\tab Configuration of Message Object 9 Arbitration:\par 
\tab - priority class 2; transmit acceptance filtering is based on the CAN\par 
\tab identifier\par 
\tab - standard 11-bit identifier\par 
\tab - identifier 11-bit:      0x000\par 
\par 
\tab Configuration of Message Object 9 Data:\par 
\par 
\tab Configuration of Message Object 9 acceptance mask:\par 
\tab - only accept receive frames with matching IDE bit\par 
\tab - acceptance mask 11-bit: 0x7FF\par 
\par 
\tab Configuration of Message Object 9 interrupt pointer:\par 
\tab - use message pending register 0 bit position 9\par 
\par 
\tab Configuration of Message Object 9 FIFO/Gateway pointer:\par 
\par 
\tab Configuration of Message Object 9 Function control:\par 
\tab - this object is a STANDARD MESSAGE OBJECT\par 
\tab - 0 valid data bytes\par 
\par 
\tab Configuration of Message Object 10:\par 
\tab MO 10 is named as : Message Object 10\par 
\par 
\tab General Configuration of the Message Object 10 :\par 
\tab - message object 10 is valid\par 
\tab - message object is used as transmit object\par 
\tab - this message object is assigned to list 2 (node 1)\par 
\par 
\tab Configuration of Message Object 10 Arbitration:\par 
\tab - priority class 2; transmit acceptance filtering is based on the CAN\par 
\tab identifier\par 
\tab - standard 11-bit identifier\par 
\tab - identifier 11-bit:      0x6F1\par 
\par 
\tab Configuration of Message Object 10 Data:\par 
\par 
\tab Configuration of Message Object 10 acceptance mask:\par 
\tab - only accept receive frames with matching IDE bit\par 
\tab - acceptance mask 11-bit: 0x7FF\par 
\par 
\tab Configuration of Message Object 10 interrupt pointer:\par 
\tab - use message pending register 0 bit position 10\par 
\par 
\tab Configuration of Message Object 10 FIFO/Gateway pointer:\par 
\par 
\tab Configuration of Message Object 10 Function control:\par 
\tab - this object is a STANDARD MESSAGE OBJECT\par 
\tab - 8 valid data bytes\par 
\par 
\tab Configuration of Message Object 11:\par 
\tab MO 11 is named as : Message Object 11\par 
\par 
\tab General Configuration of the Message Object 11 :\par 
\tab - message object 11 is valid\par 
\tab - message object is used as transmit object\par 
\tab - this message object is assigned to list 2 (node 1)\par 
\par 
\tab Configuration of Message Object 11 Arbitration:\par 
\tab - priority class 2; transmit acceptance filtering is based on the CAN\par 
\tab identifier\par 
\tab - standard 11-bit identifier\par 
\tab - identifier 11-bit:      0x000\par 
\par 
\tab Configuration of Message Object 11 Data:\par 
\par 
\tab Configuration of Message Object 11 acceptance mask:\par 
\tab - only accept receive frames with matching IDE bit\par 
\tab - acceptance mask 11-bit: 0x7FF\par 
\par 
\tab Configuration of Message Object 11 interrupt pointer:\par 
\tab - use message pending register 0 bit position 11\par 
\par 
\tab Configuration of Message Object 11 FIFO/Gateway pointer:\par 
\par 
\tab Configuration of Message Object 11 Function control:\par 
\tab - this object is a STANDARD MESSAGE OBJECT\par 
\tab - 0 valid data bytes\par 
\par 
\tab Configuration of Message Object 12:\par 
\tab MO 12 is named as : Message Object 12\par 
\par 
\tab General Configuration of the Message Object 12 :\par 
\tab - message object 12 is valid\par 
\tab - message object is used as transmit object\par 
\tab - this message object is assigned to list 2 (node 1)\par 
\par 
\tab Configuration of Message Object 12 Arbitration:\par 
\tab - priority class 1; transmit acceptance filtering is based on the list\par 
\tab order\par 
\tab - standard 11-bit identifier\par 
\tab - identifier 11-bit:      0x000\par 
\par 
\tab Configuration of Message Object 12 Data:\par 
\par 
\tab Configuration of Message Object 12 acceptance mask:\par 
\tab - only accept receive frames with matching IDE bit\par 
\tab - acceptance mask 11-bit: 0x7FF\par 
\par 
\tab Configuration of Message Object 12 interrupt pointer:\par 
\tab - use message pending register 0 bit position 12\par 
\par 
\tab Configuration of Message Object 12 FIFO/Gateway pointer:\par 
\par 
\tab Configuration of Message Object 12 Function control:\par 
\tab - this object is a STANDARD MESSAGE OBJECT\par 
\tab - 8 valid data bytes\par 
\par 
\tab Configuration of Message Object 13:\par 
\tab MO 13 is named as : Message Object 13\par 
\par 
\tab General Configuration of the Message Object 13 :\par 
\tab - message object 13 is valid\par 
\tab - message object is used as transmit object\par 
\tab - this message object is assigned to list 2 (node 1)\par 
\par 
\tab Configuration of Message Object 13 Arbitration:\par 
\tab - priority class 2; transmit acceptance filtering is based on the CAN\par 
\tab identifier\par 
\tab - standard 11-bit identifier\par 
\tab - identifier 11-bit:      0x000\par 
\par 
\tab Configuration of Message Object 13 Data:\par 
\par 
\tab Configuration of Message Object 13 acceptance mask:\par 
\tab - only accept receive frames with matching IDE bit\par 
\tab - acceptance mask 11-bit: 0x7FF\par 
\par 
\tab Configuration of Message Object 13 interrupt pointer:\par 
\tab - use message pending register 0 bit position 13\par 
\par 
\tab Configuration of Message Object 13 FIFO/Gateway pointer:\par 
\par 
\tab Configuration of Message Object 13 Function control:\par 
\tab - this object is a STANDARD MESSAGE OBJECT\par 
\tab - 0 valid data bytes\par 
\par 
\tab Configuration of Message Object 14:\par 
\tab MO 14 is named as : Message Object 14\par 
\par 
\tab General Configuration of the Message Object 14 :\par 
\tab - message object 14 is valid\par 
\tab - message object is used as transmit object\par 
\tab - this message object is assigned to list 2 (node 1)\par 
\par 
\tab Configuration of Message Object 14 Arbitration:\par 
\tab - priority class 2; transmit acceptance filtering is based on the CAN\par 
\tab identifier\par 
\tab - standard 11-bit identifier\par 
\tab - identifier 11-bit:      0x000\par 
\par 
\tab Configuration of Message Object 14 Data:\par 
\par 
\tab Configuration of Message Object 14 acceptance mask:\par 
\tab - only accept receive frames with matching IDE bit\par 
\tab - acceptance mask 11-bit: 0x7FF\par 
\par 
\tab Configuration of Message Object 14 interrupt pointer:\par 
\tab - use message pending register 0 bit position 14\par 
\par 
\tab Configuration of Message Object 14 FIFO/Gateway pointer:\par 
\par 
\tab Configuration of Message Object 14 Function control:\par 
\tab - this object is a STANDARD MESSAGE OBJECT\par 
\tab - 8 valid data bytes\par 
\par 
\tab Configuration of Message Object 15:\par 
\tab MO 15 is named as : Message Object 15\par 
\par 
\tab General Configuration of the Message Object 15 :\par 
\tab - message object 15 is valid\par 
\tab - message object is used as transmit object\par 
\tab - this message object is assigned to list 2 (node 1)\par 
\par 
\tab Configuration of Message Object 15 Arbitration:\par 
\tab - priority class 2; transmit acceptance filtering is based on the CAN\par 
\tab identifier\par 
\tab - standard 11-bit identifier\par 
\tab - identifier 11-bit:      0x000\par 
\par 
\tab Configuration of Message Object 15 Data:\par 
\par 
\tab Configuration of Message Object 15 acceptance mask:\par 
\tab - only accept receive frames with matching IDE bit\par 
\tab - acceptance mask 11-bit: 0x7FF\par 
\par 
\tab Configuration of Message Object 15 interrupt pointer:\par 
\tab - use message pending register 0 bit position 15\par 
\par 
\tab Configuration of Message Object 15 FIFO/Gateway pointer:\par 
\par 
\tab Configuration of Message Object 15 Function control:\par 
\tab - this object is a STANDARD MESSAGE OBJECT\par 
\tab - 8 valid data bytes\par 
\par 
\tab Configuration of Message Object 16:\par 
\tab - message object 16 is not valid\par 
\tab Configuration of Message Object 17:\par 
\tab - message object 17 is not valid\par 
\tab Configuration of Message Object 18:\par 
\tab - message object 18 is not valid\par 
\tab Configuration of Message Object 19:\par 
\tab - message object 19 is not valid\par 
\tab Configuration of Message Object 20:\par 
\tab - message object 20 is not valid\par 
\tab Configuration of Message Object 21:\par 
\tab - message object 21 is not valid\par 
\tab Configuration of Message Object 22:\par 
\tab - message object 22 is not valid\par 
\tab Configuration of Message Object 23:\par 
\tab - message object 23 is not valid\par 
\tab Configuration of Message Object 24:\par 
\tab - message object 24 is not valid\par 
\tab Configuration of Message Object 25:\par 
\tab - message object 25 is not valid\par 
\tab Configuration of Message Object 26:\par 
\tab - message object 26 is not valid\par 
\tab Configuration of Message Object 27:\par 
\tab - message object 27 is not valid\par 
\tab Configuration of Message Object 28:\par 
\tab - message object 28 is not valid\par 
\tab Configuration of Message Object 29:\par 
\tab - message object 29 is not valid\par 
\tab Configuration of Message Object 30:\par 
\tab - message object 30 is not valid\par 
\tab Configuration of Message Object 31:\par 
\tab - message object 31 is not valid\par 
\tab Configuration of Message Object 32:\par 
\tab - message object 32 is not valid\par 
\tab Configuration of Message Object 33:\par 
\tab - message object 33 is not valid\par 
\tab Configuration of Message Object 34:\par 
\tab - message object 34 is not valid\par 
\tab Configuration of Message Object 35:\par 
\tab - message object 35 is not valid\par 
\tab Configuration of Message Object 36:\par 
\tab - message object 36 is not valid\par 
\tab Configuration of Message Object 37:\par 
\tab - message object 37 is not valid\par 
\tab Configuration of Message Object 38:\par 
\tab - message object 38 is not valid\par 
\tab Configuration of Message Object 39:\par 
\tab - message object 39 is not valid\par 
\tab Configuration of Message Object 40:\par 
\tab - message object 40 is not valid\par 
\tab Configuration of Message Object 41:\par 
\tab - message object 41 is not valid\par 
\tab Configuration of Message Object 42:\par 
\tab - message object 42 is not valid\par 
\tab Configuration of Message Object 43:\par 
\tab - message object 43 is not valid\par 
\tab Configuration of Message Object 44:\par 
\tab - message object 44 is not valid\par 
\tab Configuration of Message Object 45:\par 
\tab - message object 45 is not valid\par 
\tab Configuration of Message Object 46:\par 
\tab - message object 46 is not valid\par 
\tab Configuration of Message Object 47:\par 
\tab - message object 47 is not valid\par 
\tab Configuration of Message Object 48:\par 
\tab - message object 48 is not valid\par 
\tab Configuration of Message Object 49:\par 
\tab - message object 49 is not valid\par 
\tab Configuration of Message Object 50:\par 
\tab - message object 50 is not valid\par 
\tab Configuration of Message Object 51:\par 
\tab - message object 51 is not valid\par 
\tab Configuration of Message Object 52:\par 
\tab - message object 52 is not valid\par 
\tab Configuration of Message Object 53:\par 
\tab - message object 53 is not valid\par 
\tab Configuration of Message Object 54:\par 
\tab - message object 54 is not valid\par 
\tab Configuration of Message Object 55:\par 
\tab - message object 55 is not valid\par 
\tab Configuration of Message Object 56:\par 
\tab - message object 56 is not valid\par 
\tab Configuration of Message Object 57:\par 
\tab - message object 57 is not valid\par 
\tab Configuration of Message Object 58:\par 
\tab - message object 58 is not valid\par 
\tab Configuration of Message Object 59:\par 
\tab - message object 59 is not valid\par 
\tab Configuration of Message Object 60:\par 
\tab - message object 60 is not valid\par 
\tab Configuration of Message Object 61:\par 
\tab - message object 61 is not valid\par 
\tab Configuration of Message Object 62:\par 
\tab - message object 62 is not valid\par 
\tab Configuration of Message Object 63:\par 
\tab - message object 63 is not valid\par 
\par 
\tab Configuration of Service Request Nodes 0 - 15:\par 
\tab SRN0 service request node configuration:\par 
\tab - SRN0 interrupt priority level (ILVL) = 11\par 
\tab - SRN0 interrupt group level (GLVL) = 0\par 
\tab - SRN0 group priority extension (GPX) = 0\par 
\par 

}
